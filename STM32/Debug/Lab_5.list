
Lab_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08003d3c  08003d3c  00013d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee8  08003ee8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ee8  08003ee8  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ee8  08003ee8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000007c  08003f6c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08003f6c  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbf9  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000279c  00000000  00000000  0002fc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00032440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00033200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019058  00000000  00000000  00033ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee87  00000000  00000000  0004cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c9c  00000000  00000000  0005bda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5a43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004014  00000000  00000000  000e5a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d24 	.word	0x08003d24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08003d24 	.word	0x08003d24

0800014c <SCH_Init>:
static SCH_ERROR Error_code = SCH_OKAY;

static uint32_t report_period = SCH_REPORT_FREQ;
static uint32_t print_task_period = SCH_PRINT_TASK_FREQ;

void SCH_Init(TIM_HandleTypeDef *htim) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(htim == NULL) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b00      	cmp	r3, #0
 8000158:	d103      	bne.n	8000162 <SCH_Init+0x16>
		Error_code = SCH_INIT_FAIL;
 800015a:	4b0c      	ldr	r3, [pc, #48]	; (800018c <SCH_Init+0x40>)
 800015c:	2204      	movs	r2, #4
 800015e:	701a      	strb	r2, [r3, #0]
		return;
 8000160:	e011      	b.n	8000186 <SCH_Init+0x3a>
	}

	INTERRUPT_PERIOD = (htim->Instance->PSC+1)*(htim->Instance->ARR+1) / SCH_SYSCLK_FREQ;
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	681b      	ldr	r3, [r3, #0]
 8000166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000168:	3301      	adds	r3, #1
 800016a:	687a      	ldr	r2, [r7, #4]
 800016c:	6812      	ldr	r2, [r2, #0]
 800016e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000170:	3201      	adds	r2, #1
 8000172:	fb02 f303 	mul.w	r3, r2, r3
 8000176:	4a06      	ldr	r2, [pc, #24]	; (8000190 <SCH_Init+0x44>)
 8000178:	fba2 2303 	umull	r2, r3, r2, r3
 800017c:	0a5b      	lsrs	r3, r3, #9
 800017e:	4a05      	ldr	r2, [pc, #20]	; (8000194 <SCH_Init+0x48>)
 8000180:	6013      	str	r3, [r2, #0]
	TL_init();
 8000182:	f000 f95b 	bl	800043c <TL_init>
}
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	2000009c 	.word	0x2000009c
 8000190:	10624dd3 	.word	0x10624dd3
 8000194:	20000098 	.word	0x20000098

08000198 <SCH_Add_Task>:

uint32_t SCH_Add_Task(void(*pFunc)(), unsigned int DELAY, unsigned int PERIOD) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
	if(TL_size() == SCH_MAX_TASKS) {
 80001a4:	f000 f9f4 	bl	8000590 <TL_size>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b05      	cmp	r3, #5
 80001ac:	d104      	bne.n	80001b8 <SCH_Add_Task+0x20>
		Error_code = SCH_TOO_MANY_TASK;
 80001ae:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <SCH_Add_Task+0x44>)
 80001b0:	2201      	movs	r2, #1
 80001b2:	701a      	strb	r2, [r3, #0]
		return 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	e00d      	b.n	80001d4 <SCH_Add_Task+0x3c>
	}
	if(pFunc == NULL) {
 80001b8:	68fb      	ldr	r3, [r7, #12]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d104      	bne.n	80001c8 <SCH_Add_Task+0x30>
		Error_code = SCH_ADD_FAIL;
 80001be:	4b07      	ldr	r3, [pc, #28]	; (80001dc <SCH_Add_Task+0x44>)
 80001c0:	2203      	movs	r2, #3
 80001c2:	701a      	strb	r2, [r3, #0]
		return 0;
 80001c4:	2300      	movs	r3, #0
 80001c6:	e005      	b.n	80001d4 <SCH_Add_Task+0x3c>
	}

	TL_insert(pFunc, DELAY, PERIOD);
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	68b9      	ldr	r1, [r7, #8]
 80001cc:	68f8      	ldr	r0, [r7, #12]
 80001ce:	f000 f94d 	bl	800046c <TL_insert>
	return (uint32_t)pFunc;
 80001d2:	68fb      	ldr	r3, [r7, #12]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3710      	adds	r7, #16
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	2000009c 	.word	0x2000009c

080001e0 <SCH_Update>:
	}

	//SCH_Go_To_Sleep(); // break program when uart transmits
}

void SCH_Update(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0

	STask* task = TL_getFront();
 80001e6:	f000 f997 	bl	8000518 <TL_getFront>
 80001ea:	6078      	str	r0, [r7, #4]
	if(task) {
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d011      	beq.n	8000216 <SCH_Update+0x36>
		if(task->Delay == 0) {
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d106      	bne.n	8000208 <SCH_Update+0x28>
			task->RunMe++;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	7b1b      	ldrb	r3, [r3, #12]
 80001fe:	3301      	adds	r3, #1
 8000200:	b2da      	uxtb	r2, r3
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	731a      	strb	r2, [r3, #12]
 8000206:	e006      	b.n	8000216 <SCH_Update+0x36>
		}
		else {
			task->Delay -= INTERRUPT_PERIOD;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	685a      	ldr	r2, [r3, #4]
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <SCH_Update+0x48>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	1ad2      	subs	r2, r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	605a      	str	r2, [r3, #4]
		}
	}

	SCH_Report_Status();
 8000216:	f000 f809 	bl	800022c <SCH_Report_Status>
	SCH_print();
 800021a:	f000 f84d 	bl	80002b8 <SCH_print>
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000098 	.word	0x20000098

0800022c <SCH_Report_Status>:

void SCH_Report_Status() {
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	report_period--;
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <SCH_Report_Status+0x70>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	3b01      	subs	r3, #1
 8000236:	4a19      	ldr	r2, [pc, #100]	; (800029c <SCH_Report_Status+0x70>)
 8000238:	6013      	str	r3, [r2, #0]
	if(report_period > 0) return;
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <SCH_Report_Status+0x70>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d129      	bne.n	8000296 <SCH_Report_Status+0x6a>

	switch(Error_code) {
 8000242:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <SCH_Report_Status+0x74>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b04      	cmp	r3, #4
 8000248:	d820      	bhi.n	800028c <SCH_Report_Status+0x60>
 800024a:	a201      	add	r2, pc, #4	; (adr r2, 8000250 <SCH_Report_Status+0x24>)
 800024c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000250:	08000265 	.word	0x08000265
 8000254:	0800026d 	.word	0x0800026d
 8000258:	08000275 	.word	0x08000275
 800025c:	0800027d 	.word	0x0800027d
 8000260:	08000285 	.word	0x08000285
	case SCH_OKAY:
		printf("Scheduler status: OKAY\r\n\r\n");
 8000264:	480f      	ldr	r0, [pc, #60]	; (80002a4 <SCH_Report_Status+0x78>)
 8000266:	f002 fe0d 	bl	8002e84 <puts>
		break;
 800026a:	e010      	b.n	800028e <SCH_Report_Status+0x62>
	case SCH_TOO_MANY_TASK:
		printf("Scheduler status: Too many tasks\r\n\r\n");
 800026c:	480e      	ldr	r0, [pc, #56]	; (80002a8 <SCH_Report_Status+0x7c>)
 800026e:	f002 fe09 	bl	8002e84 <puts>
		break;
 8000272:	e00c      	b.n	800028e <SCH_Report_Status+0x62>
	case SCH_DELETE_FAIL:
		printf("Scheduler status: fail to delete task\r\n\r\n");
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <SCH_Report_Status+0x80>)
 8000276:	f002 fe05 	bl	8002e84 <puts>
		break;
 800027a:	e008      	b.n	800028e <SCH_Report_Status+0x62>
	case SCH_ADD_FAIL:
		printf("Scheduler status: fail to add task\r\n\r\n");
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <SCH_Report_Status+0x84>)
 800027e:	f002 fe01 	bl	8002e84 <puts>
		break;
 8000282:	e004      	b.n	800028e <SCH_Report_Status+0x62>
	case SCH_INIT_FAIL:
		printf("Scheduler status: fail to start scheduler\r\n\r\n");
 8000284:	480b      	ldr	r0, [pc, #44]	; (80002b4 <SCH_Report_Status+0x88>)
 8000286:	f002 fdfd 	bl	8002e84 <puts>
		break;
 800028a:	e000      	b.n	800028e <SCH_Report_Status+0x62>
	default:
		break;
 800028c:	bf00      	nop
	}

	report_period = SCH_REPORT_FREQ;
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <SCH_Report_Status+0x70>)
 8000290:	2264      	movs	r2, #100	; 0x64
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	e000      	b.n	8000298 <SCH_Report_Status+0x6c>
	if(report_period > 0) return;
 8000296:	bf00      	nop
}
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000000 	.word	0x20000000
 80002a0:	2000009c 	.word	0x2000009c
 80002a4:	08003d3c 	.word	0x08003d3c
 80002a8:	08003d58 	.word	0x08003d58
 80002ac:	08003d7c 	.word	0x08003d7c
 80002b0:	08003da8 	.word	0x08003da8
 80002b4:	08003dd0 	.word	0x08003dd0

080002b8 <SCH_print>:
void SCH_Go_To_Sleep(void) {
	HAL_SuspendTick();
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
}

void SCH_print() {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
	print_task_period--;
 80002be:	4b17      	ldr	r3, [pc, #92]	; (800031c <SCH_print+0x64>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	3b01      	subs	r3, #1
 80002c4:	4a15      	ldr	r2, [pc, #84]	; (800031c <SCH_print+0x64>)
 80002c6:	6013      	str	r3, [r2, #0]
	if(print_task_period > 0) return;
 80002c8:	4b14      	ldr	r3, [pc, #80]	; (800031c <SCH_print+0x64>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d120      	bne.n	8000312 <SCH_print+0x5a>

	TL_point_start();
 80002d0:	f000 f934 	bl	800053c <TL_point_start>
	STask* task = TL_get();
 80002d4:	f000 f942 	bl	800055c <TL_get>
 80002d8:	6078      	str	r0, [r7, #4]
	uint32_t accumDelay = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	603b      	str	r3, [r7, #0]
	while(task) {
 80002de:	e00e      	b.n	80002fe <SCH_print+0x46>
		accumDelay += task->Delay;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	683a      	ldr	r2, [r7, #0]
 80002e6:	4413      	add	r3, r2
 80002e8:	603b      	str	r3, [r7, #0]
		printf("Task id %lu delay remain %lu ms\r\n", task->TaskID, accumDelay);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	691b      	ldr	r3, [r3, #16]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	4619      	mov	r1, r3
 80002f2:	480b      	ldr	r0, [pc, #44]	; (8000320 <SCH_print+0x68>)
 80002f4:	f002 fd40 	bl	8002d78 <iprintf>
		task = TL_get();
 80002f8:	f000 f930 	bl	800055c <TL_get>
 80002fc:	6078      	str	r0, [r7, #4]
	while(task) {
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d1ed      	bne.n	80002e0 <SCH_print+0x28>
	}
	printf("\r\n");
 8000304:	4807      	ldr	r0, [pc, #28]	; (8000324 <SCH_print+0x6c>)
 8000306:	f002 fdbd 	bl	8002e84 <puts>

	print_task_period = SCH_PRINT_TASK_FREQ;
 800030a:	4b04      	ldr	r3, [pc, #16]	; (800031c <SCH_print+0x64>)
 800030c:	220a      	movs	r2, #10
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	e000      	b.n	8000314 <SCH_print+0x5c>
	if(print_task_period > 0) return;
 8000312:	bf00      	nop
}
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	08003e00 	.word	0x08003e00
 8000324:	08003e24 	.word	0x08003e24

08000328 <TA_init>:

static uint32_t remain = MAX_NODE;

static struct Node* head = NULL;

void TA_init(void) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NODE; i++) {
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e055      	b.n	80003e0 <TA_init+0xb8>
		slot[i].data.Delay = 0;
 8000334:	492f      	ldr	r1, [pc, #188]	; (80003f4 <TA_init+0xcc>)
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	4613      	mov	r3, r2
 800033a:	005b      	lsls	r3, r3, #1
 800033c:	4413      	add	r3, r2
 800033e:	00db      	lsls	r3, r3, #3
 8000340:	440b      	add	r3, r1
 8000342:	3304      	adds	r3, #4
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
		slot[i].data.Period = 0;
 8000348:	492a      	ldr	r1, [pc, #168]	; (80003f4 <TA_init+0xcc>)
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	4613      	mov	r3, r2
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	4413      	add	r3, r2
 8000352:	00db      	lsls	r3, r3, #3
 8000354:	440b      	add	r3, r1
 8000356:	3308      	adds	r3, #8
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
		slot[i].data.RunMe = 0;
 800035c:	4925      	ldr	r1, [pc, #148]	; (80003f4 <TA_init+0xcc>)
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	4613      	mov	r3, r2
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	4413      	add	r3, r2
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	440b      	add	r3, r1
 800036a:	330c      	adds	r3, #12
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
		slot[i].data.TaskID = 0;
 8000370:	4920      	ldr	r1, [pc, #128]	; (80003f4 <TA_init+0xcc>)
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	4613      	mov	r3, r2
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	4413      	add	r3, r2
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	440b      	add	r3, r1
 800037e:	3310      	adds	r3, #16
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
		slot[i].data.pTask = NULL;
 8000384:	491b      	ldr	r1, [pc, #108]	; (80003f4 <TA_init+0xcc>)
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	4613      	mov	r3, r2
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	4413      	add	r3, r2
 800038e:	00db      	lsls	r3, r3, #3
 8000390:	440b      	add	r3, r1
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
		slot[i].next = NULL;
 8000396:	4917      	ldr	r1, [pc, #92]	; (80003f4 <TA_init+0xcc>)
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	4613      	mov	r3, r2
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	4413      	add	r3, r2
 80003a0:	00db      	lsls	r3, r3, #3
 80003a2:	440b      	add	r3, r1
 80003a4:	3314      	adds	r3, #20
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]

		if(i == 0) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d103      	bne.n	80003b8 <TA_init+0x90>
			head = &(slot[0]);
 80003b0:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <TA_init+0xd0>)
 80003b2:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <TA_init+0xcc>)
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	e010      	b.n	80003da <TA_init+0xb2>
		}
		else {
			slot[i-1].next = &(slot[i]);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	1e5a      	subs	r2, r3, #1
 80003bc:	6879      	ldr	r1, [r7, #4]
 80003be:	460b      	mov	r3, r1
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	440b      	add	r3, r1
 80003c4:	00db      	lsls	r3, r3, #3
 80003c6:	490b      	ldr	r1, [pc, #44]	; (80003f4 <TA_init+0xcc>)
 80003c8:	4419      	add	r1, r3
 80003ca:	480a      	ldr	r0, [pc, #40]	; (80003f4 <TA_init+0xcc>)
 80003cc:	4613      	mov	r3, r2
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	4413      	add	r3, r2
 80003d2:	00db      	lsls	r3, r3, #3
 80003d4:	4403      	add	r3, r0
 80003d6:	3314      	adds	r3, #20
 80003d8:	6019      	str	r1, [r3, #0]
	for(int i = 0; i < MAX_NODE; i++) {
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3301      	adds	r3, #1
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b05      	cmp	r3, #5
 80003e4:	dda6      	ble.n	8000334 <TA_init+0xc>
		}
	}
}
 80003e6:	bf00      	nop
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	200000a0 	.word	0x200000a0
 80003f8:	20000130 	.word	0x20000130

080003fc <TA_malloc>:

struct Node* TA_malloc(void) {
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
	if(remain == 0) return NULL;
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <TA_malloc+0x38>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d101      	bne.n	800040e <TA_malloc+0x12>
 800040a:	2300      	movs	r3, #0
 800040c:	e00d      	b.n	800042a <TA_malloc+0x2e>

	struct Node* temp = head;
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <TA_malloc+0x3c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	607b      	str	r3, [r7, #4]
	head = head->next;
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <TA_malloc+0x3c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a07      	ldr	r2, [pc, #28]	; (8000438 <TA_malloc+0x3c>)
 800041c:	6013      	str	r3, [r2, #0]

	remain--;
 800041e:	4b05      	ldr	r3, [pc, #20]	; (8000434 <TA_malloc+0x38>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	3b01      	subs	r3, #1
 8000424:	4a03      	ldr	r2, [pc, #12]	; (8000434 <TA_malloc+0x38>)
 8000426:	6013      	str	r3, [r2, #0]
	return temp;
 8000428:	687b      	ldr	r3, [r7, #4]
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	20000008 	.word	0x20000008
 8000438:	20000130 	.word	0x20000130

0800043c <TL_init>:
static uint32_t taskCount = 0;

static struct Node* head = NULL;
static struct Node* curr = NULL;

void TL_init(void) {
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	TA_init();
 8000440:	f7ff ff72 	bl	8000328 <TA_init>
	head = TA_malloc(); // create a virtual node
 8000444:	f7ff ffda 	bl	80003fc <TA_malloc>
 8000448:	4603      	mov	r3, r0
 800044a:	4a05      	ldr	r2, [pc, #20]	; (8000460 <TL_init+0x24>)
 800044c:	6013      	str	r3, [r2, #0]

	taskCount = 0;
 800044e:	4b05      	ldr	r3, [pc, #20]	; (8000464 <TL_init+0x28>)
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
	curr = NULL;
 8000454:	4b04      	ldr	r3, [pc, #16]	; (8000468 <TL_init+0x2c>)
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000138 	.word	0x20000138
 8000464:	20000134 	.word	0x20000134
 8000468:	2000013c 	.word	0x2000013c

0800046c <TL_insert>:

void TL_insert(void(*pFunc)(), unsigned int DELAY, unsigned int PERIOD) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
	struct Node* preTemp = head;
 8000478:	4b25      	ldr	r3, [pc, #148]	; (8000510 <TL_insert+0xa4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	61fb      	str	r3, [r7, #28]
	struct Node* temp = head->next;
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <TL_insert+0xa4>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	61bb      	str	r3, [r7, #24]

	uint32_t accumDelay = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
	while(temp && (accumDelay + (temp->data).Delay) <= DELAY) {
 800048a:	e009      	b.n	80004a0 <TL_insert+0x34>
		accumDelay += (temp->data).Delay;
 800048c:	69bb      	ldr	r3, [r7, #24]
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	4413      	add	r3, r2
 8000494:	617b      	str	r3, [r7, #20]

		preTemp = temp;
 8000496:	69bb      	ldr	r3, [r7, #24]
 8000498:	61fb      	str	r3, [r7, #28]
		temp = temp->next;
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	61bb      	str	r3, [r7, #24]
	while(temp && (accumDelay + (temp->data).Delay) <= DELAY) {
 80004a0:	69bb      	ldr	r3, [r7, #24]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d006      	beq.n	80004b4 <TL_insert+0x48>
 80004a6:	69bb      	ldr	r3, [r7, #24]
 80004a8:	685a      	ldr	r2, [r3, #4]
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	4413      	add	r3, r2
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d2eb      	bcs.n	800048c <TL_insert+0x20>
	}

	struct Node* newNode = TA_malloc();
 80004b4:	f7ff ffa2 	bl	80003fc <TA_malloc>
 80004b8:	6138      	str	r0, [r7, #16]
	preTemp->next = newNode;
 80004ba:	69fb      	ldr	r3, [r7, #28]
 80004bc:	693a      	ldr	r2, [r7, #16]
 80004be:	615a      	str	r2, [r3, #20]
	newNode->next = temp;
 80004c0:	693b      	ldr	r3, [r7, #16]
 80004c2:	69ba      	ldr	r2, [r7, #24]
 80004c4:	615a      	str	r2, [r3, #20]


	(newNode->data).Period = PERIOD;
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	609a      	str	r2, [r3, #8]
	(newNode->data).RunMe = 0;
 80004cc:	693b      	ldr	r3, [r7, #16]
 80004ce:	2200      	movs	r2, #0
 80004d0:	731a      	strb	r2, [r3, #12]
	(newNode->data).TaskID = (uint32_t)pFunc;
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	611a      	str	r2, [r3, #16]
	(newNode->data).pTask = pFunc;
 80004d8:	693b      	ldr	r3, [r7, #16]
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	601a      	str	r2, [r3, #0]
	(newNode->data).Delay = DELAY - accumDelay;
 80004de:	68ba      	ldr	r2, [r7, #8]
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	1ad2      	subs	r2, r2, r3
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	605a      	str	r2, [r3, #4]

	if(temp) {
 80004e8:	69bb      	ldr	r3, [r7, #24]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d006      	beq.n	80004fc <TL_insert+0x90>
		(temp->data).Delay -= (newNode->data).Delay;
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	685a      	ldr	r2, [r3, #4]
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	1ad2      	subs	r2, r2, r3
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	605a      	str	r2, [r3, #4]
	}

	taskCount++;
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <TL_insert+0xa8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3301      	adds	r3, #1
 8000502:	4a04      	ldr	r2, [pc, #16]	; (8000514 <TL_insert+0xa8>)
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	3720      	adds	r7, #32
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000138 	.word	0x20000138
 8000514:	20000134 	.word	0x20000134

08000518 <TL_getFront>:

	taskCount--;
	return delNode;
}

STask* TL_getFront() {
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	if(head)
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <TL_getFront+0x20>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d003      	beq.n	800052c <TL_getFront+0x14>
		return &(head->next->data);
 8000524:	4b04      	ldr	r3, [pc, #16]	; (8000538 <TL_getFront+0x20>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	e000      	b.n	800052e <TL_getFront+0x16>
	return NULL;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	20000138 	.word	0x20000138

0800053c <TL_point_start>:


void TL_point_start() {
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	curr = head->next;
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <TL_point_start+0x18>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a04      	ldr	r2, [pc, #16]	; (8000558 <TL_point_start+0x1c>)
 8000548:	6013      	str	r3, [r2, #0]
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000138 	.word	0x20000138
 8000558:	2000013c 	.word	0x2000013c

0800055c <TL_get>:
STask* TL_get() {
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
	if(curr) {
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <TL_get+0x30>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d009      	beq.n	800057e <TL_get+0x22>
		STask* task = &(curr->data);
 800056a:	4b08      	ldr	r3, [pc, #32]	; (800058c <TL_get+0x30>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	607b      	str	r3, [r7, #4]
		curr = curr->next;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <TL_get+0x30>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a05      	ldr	r2, [pc, #20]	; (800058c <TL_get+0x30>)
 8000578:	6013      	str	r3, [r2, #0]
		return task;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	e000      	b.n	8000580 <TL_get+0x24>
	}
	return NULL;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	2000013c 	.word	0x2000013c

08000590 <TL_size>:
uint32_t TL_size() {
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	return taskCount;
 8000594:	4b02      	ldr	r3, [pc, #8]	; (80005a0 <TL_size+0x10>)
 8000596:	681b      	ldr	r3, [r3, #0]
}
 8000598:	4618      	mov	r0, r3
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	20000134 	.word	0x20000134

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fb12 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f830 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f8e0 	bl	8000774 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005b4:	f000 f868 	bl	8000688 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 f8b2 	bl	8000720 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_uart_printf(&huart1);
 80005bc:	480e      	ldr	r0, [pc, #56]	; (80005f8 <main+0x54>)
 80005be:	f000 fabf 	bl	8000b40 <init_uart_printf>
  HAL_TIM_Base_Start_IT(&htim2);
 80005c2:	480e      	ldr	r0, [pc, #56]	; (80005fc <main+0x58>)
 80005c4:	f001 fb3a 	bl	8001c3c <HAL_TIM_Base_Start_IT>
  SCH_Init(&htim2);
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <main+0x58>)
 80005ca:	f7ff fdbf 	bl	800014c <SCH_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  id1 = SCH_Add_Task(toggleLed, 500, 250);
 80005ce:	22fa      	movs	r2, #250	; 0xfa
 80005d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <main+0x5c>)
 80005d6:	f7ff fddf 	bl	8000198 <SCH_Add_Task>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a09      	ldr	r2, [pc, #36]	; (8000604 <main+0x60>)
 80005de:	6013      	str	r3, [r2, #0]
  id2 = SCH_Add_Task(toggleLed2, 510, 500);
 80005e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005e4:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <main+0x64>)
 80005ea:	f7ff fdd5 	bl	8000198 <SCH_Add_Task>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <main+0x68>)
 80005f2:	6013      	str	r3, [r2, #0]
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x50>
 80005f6:	bf00      	nop
 80005f8:	2000014c 	.word	0x2000014c
 80005fc:	20000198 	.word	0x20000198
 8000600:	080007d9 	.word	0x080007d9
 8000604:	20000194 	.word	0x20000194
 8000608:	080007ed 	.word	0x080007ed
 800060c:	20000190 	.word	0x20000190

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b090      	sub	sp, #64	; 0x40
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2228      	movs	r2, #40	; 0x28
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fba2 	bl	8002d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000632:	2302      	movs	r3, #2
 8000634:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	2301      	movs	r3, #1
 8000638:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	2310      	movs	r3, #16
 800063c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063e:	2300      	movs	r3, #0
 8000640:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fe8e 	bl	8001368 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000652:	f000 f8e4 	bl	800081e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f001 f8fa 	bl	8001868 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800067a:	f000 f8d0 	bl	800081e <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3740      	adds	r7, #64	; 0x40
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	463b      	mov	r3, r7
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_TIM2_Init+0x94>)
 80006a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_TIM2_Init+0x94>)
 80006ae:	f240 321f 	movw	r2, #799	; 0x31f
 80006b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_TIM2_Init+0x94>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_TIM2_Init+0x94>)
 80006bc:	2263      	movs	r2, #99	; 0x63
 80006be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_TIM2_Init+0x94>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_TIM2_Init+0x94>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006cc:	4813      	ldr	r0, [pc, #76]	; (800071c <MX_TIM2_Init+0x94>)
 80006ce:	f001 fa65 	bl	8001b9c <HAL_TIM_Base_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006d8:	f000 f8a1 	bl	800081e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	4619      	mov	r1, r3
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_TIM2_Init+0x94>)
 80006ea:	f001 fbfb 	bl	8001ee4 <HAL_TIM_ConfigClockSource>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80006f4:	f000 f893 	bl	800081e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_TIM2_Init+0x94>)
 8000706:	f001 fdc3 	bl	8002290 <HAL_TIMEx_MasterConfigSynchronization>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000710:	f000 f885 	bl	800081e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000198 	.word	0x20000198

08000720 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART1_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800072c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART1_UART_Init+0x4c>)
 8000758:	f001 fe04 	bl	8002364 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f85c 	bl	800081e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000014c 	.word	0x2000014c
 8000770:	40013800 	.word	0x40013800

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000788:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_GPIO_Init+0x5c>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <MX_GPIO_Init+0x5c>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	6193      	str	r3, [r2, #24]
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_GPIO_Init+0x5c>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	f003 0304 	and.w	r3, r3, #4
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG2_Pin|DEBUG_Pin|DEBUG3_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	211c      	movs	r1, #28
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <MX_GPIO_Init+0x60>)
 80007a6:	f000 fdad 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG2_Pin DEBUG_Pin DEBUG3_Pin */
  GPIO_InitStruct.Pin = DEBUG2_Pin|DEBUG_Pin|DEBUG3_Pin;
 80007aa:	231c      	movs	r3, #28
 80007ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2302      	movs	r3, #2
 80007b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0x60>)
 80007c2:	f000 fc25 	bl	8001010 <HAL_GPIO_Init>

}
 80007c6:	bf00      	nop
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010800 	.word	0x40010800

080007d8 <toggleLed>:

/* USER CODE BEGIN 4 */
void toggleLed() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(DEBUG2_GPIO_Port, DEBUG2_Pin);
 80007dc:	2104      	movs	r1, #4
 80007de:	4802      	ldr	r0, [pc, #8]	; (80007e8 <toggleLed+0x10>)
 80007e0:	f000 fda8 	bl	8001334 <HAL_GPIO_TogglePin>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40010800 	.word	0x40010800

080007ec <toggleLed2>:
void toggleLed2() {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(DEBUG_GPIO_Port, DEBUG_Pin);
 80007f0:	2108      	movs	r1, #8
 80007f2:	4802      	ldr	r0, [pc, #8]	; (80007fc <toggleLed2+0x10>)
 80007f4:	f000 fd9e 	bl	8001334 <HAL_GPIO_TogglePin>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40010800 	.word	0x40010800

08000800 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	//HAL_ResumeTick(); // resume systick from sleep
//	static uint32_t count = 1000;
	if(htim->Instance == TIM2) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
		SCH_Update();
 8000812:	f7ff fce5 	bl	80001e0 <SCH_Update>
//				count = 1000;
//				SCH_Delete_Task(id1);
//			}
//		}
	}
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000822:	b672      	cpsid	i
}
 8000824:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000826:	e7fe      	b.n	8000826 <Error_Handler+0x8>

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_MspInit+0x5c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <HAL_MspInit+0x5c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_MspInit+0x5c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x5c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <HAL_MspInit+0x5c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_MspInit+0x5c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_MspInit+0x60>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_MspInit+0x60>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000
 8000888:	40010000 	.word	0x40010000

0800088c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800089c:	d113      	bne.n	80008c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_TIM_Base_MspInit+0x44>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <HAL_TIM_Base_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_TIM_Base_MspInit+0x44>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	201c      	movs	r0, #28
 80008bc:	f000 fac1 	bl	8000e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008c0:	201c      	movs	r0, #28
 80008c2:	f000 fada 	bl	8000e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a20      	ldr	r2, [pc, #128]	; (8000970 <HAL_UART_MspInit+0x9c>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d139      	bne.n	8000968 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <HAL_UART_MspInit+0xa0>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <HAL_UART_MspInit+0xa0>)
 80008fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <HAL_UART_MspInit+0xa0>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_UART_MspInit+0xa0>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a18      	ldr	r2, [pc, #96]	; (8000974 <HAL_UART_MspInit+0xa0>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_UART_MspInit+0xa0>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000928:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	4619      	mov	r1, r3
 8000938:	480f      	ldr	r0, [pc, #60]	; (8000978 <HAL_UART_MspInit+0xa4>)
 800093a:	f000 fb69 	bl	8001010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800093e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000942:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 0310 	add.w	r3, r7, #16
 8000950:	4619      	mov	r1, r3
 8000952:	4809      	ldr	r0, [pc, #36]	; (8000978 <HAL_UART_MspInit+0xa4>)
 8000954:	f000 fb5c 	bl	8001010 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000958:	2200      	movs	r2, #0
 800095a:	2100      	movs	r1, #0
 800095c:	2025      	movs	r0, #37	; 0x25
 800095e:	f000 fa70 	bl	8000e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000962:	2025      	movs	r0, #37	; 0x25
 8000964:	f000 fa89 	bl	8000e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40013800 	.word	0x40013800
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f94b 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <TIM2_IRQHandler+0x10>)
 80009d2:	f001 f97f 	bl	8001cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000198 	.word	0x20000198

080009e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <USART1_IRQHandler+0x10>)
 80009e6:	f001 fd9d 	bl	8002524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000014c 	.word	0x2000014c

080009f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	e00a      	b.n	8000a1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a06:	f3af 8000 	nop.w
 8000a0a:	4601      	mov	r1, r0
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	1c5a      	adds	r2, r3, #1
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	b2ca      	uxtb	r2, r1
 8000a14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf0      	blt.n	8000a06 <_read+0x12>
	}

return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b086      	sub	sp, #24
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	60f8      	str	r0, [r7, #12]
 8000a36:	60b9      	str	r1, [r7, #8]
 8000a38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	e009      	b.n	8000a54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	60ba      	str	r2, [r7, #8]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 f887 	bl	8000b5c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf1      	blt.n	8000a40 <_write+0x12>
	}
	return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_close>:

int _close(int file)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8c:	605a      	str	r2, [r3, #4]
	return 0;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <_isatty>:

int _isatty(int file)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
	return 1;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b085      	sub	sp, #20
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
	return 0;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
	...

08000ac8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <_sbrk+0x5c>)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <_sbrk+0x60>)
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d102      	bne.n	8000aea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <_sbrk+0x64>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <_sbrk+0x68>)
 8000ae8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d207      	bcs.n	8000b08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af8:	f002 f90c 	bl	8002d14 <__errno>
 8000afc:	4603      	mov	r3, r0
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
 8000b06:	e009      	b.n	8000b1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <_sbrk+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <_sbrk+0x64>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <_sbrk+0x64>)
 8000b18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3718      	adds	r7, #24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20002800 	.word	0x20002800
 8000b28:	00000400 	.word	0x00000400
 8000b2c:	20000140 	.word	0x20000140
 8000b30:	200001f8 	.word	0x200001f8

08000b34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <init_uart_printf>:

#include "uart_printf.h"

UART_HandleTypeDef *huart;

void init_uart_printf(UART_HandleTypeDef *uart) {
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	huart = uart;
 8000b48:	4a03      	ldr	r2, [pc, #12]	; (8000b58 <init_uart_printf+0x18>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	200001e0 	.word	0x200001e0

08000b5c <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(huart, (uint8_t *)&ch, 1, 0xFFFF);
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <__io_putchar+0x24>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	1d39      	adds	r1, r7, #4
 8000b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f001 fc45 	bl	80023fe <HAL_UART_Transmit>

return ch;
 8000b74:	687b      	ldr	r3, [r7, #4]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200001e0 	.word	0x200001e0

08000b84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	; (8000bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000baa:	f7ff ffc3 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bae:	f002 f8b7 	bl	8002d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb2:	f7ff fcf7 	bl	80005a4 <main>
  bx lr
 8000bb6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000bc0:	08003ef0 	.word	0x08003ef0
  ldr r2, =_sbss
 8000bc4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000bc8:	200001f8 	.word	0x200001f8

08000bcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_2_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_Init+0x28>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_Init+0x28>)
 8000bda:	f043 0310 	orr.w	r3, r3, #16
 8000bde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f923 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be6:	200f      	movs	r0, #15
 8000be8:	f000 f808 	bl	8000bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bec:	f7ff fe1c 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40022000 	.word	0x40022000

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x54>)
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_InitTick+0x58>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f93b 	bl	8000e96 <HAL_SYSTICK_Config>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00e      	b.n	8000c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d80a      	bhi.n	8000c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f000 f903 	bl	8000e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_InitTick+0x5c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000000c 	.word	0x2000000c
 8000c54:	20000014 	.word	0x20000014
 8000c58:	20000010 	.word	0x20000010

08000c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x20>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <HAL_IncTick+0x20>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	20000014 	.word	0x20000014
 8000c7c:	200001e4 	.word	0x200001e4

08000c80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	200001e4 	.word	0x200001e4

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	f003 021f 	and.w	r2, r3, #31
 8000d10:	4906      	ldr	r1, [pc, #24]	; (8000d2c <__NVIC_EnableIRQ+0x34>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	095b      	lsrs	r3, r3, #5
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db0a      	blt.n	8000d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	490c      	ldr	r1, [pc, #48]	; (8000d7c <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d58:	e00a      	b.n	8000d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	; (8000d80 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	0112      	lsls	r2, r2, #4
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	440b      	add	r3, r1
 8000d6e:	761a      	strb	r2, [r3, #24]
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	f1c3 0307 	rsb	r3, r3, #7
 8000d9e:	2b04      	cmp	r3, #4
 8000da0:	bf28      	it	cs
 8000da2:	2304      	movcs	r3, #4
 8000da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d902      	bls.n	8000db4 <NVIC_EncodePriority+0x30>
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3b03      	subs	r3, #3
 8000db2:	e000      	b.n	8000db6 <NVIC_EncodePriority+0x32>
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	43d9      	mvns	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	; 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff90 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff2d 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff42 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ff90 	bl	8000d84 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff5f 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff35 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ffa2 	bl	8000de8 <SysTick_Config>
 8000ea4:	4603      	mov	r3, r0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d008      	beq.n	8000ed6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e020      	b.n	8000f18 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 020e 	bic.w	r2, r2, #14
 8000ee4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f022 0201 	bic.w	r2, r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efe:	2101      	movs	r1, #1
 8000f00:	fa01 f202 	lsl.w	r2, r1, r2
 8000f04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d005      	beq.n	8000f46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e051      	b.n	8000fea <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 020e 	bic.w	r2, r2, #14
 8000f54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f022 0201 	bic.w	r2, r2, #1
 8000f64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <HAL_DMA_Abort_IT+0xd0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d029      	beq.n	8000fc4 <HAL_DMA_Abort_IT+0xa0>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a20      	ldr	r2, [pc, #128]	; (8000ff8 <HAL_DMA_Abort_IT+0xd4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d022      	beq.n	8000fc0 <HAL_DMA_Abort_IT+0x9c>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <HAL_DMA_Abort_IT+0xd8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d01a      	beq.n	8000fba <HAL_DMA_Abort_IT+0x96>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <HAL_DMA_Abort_IT+0xdc>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d012      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0x90>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <HAL_DMA_Abort_IT+0xe0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00a      	beq.n	8000fae <HAL_DMA_Abort_IT+0x8a>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <HAL_DMA_Abort_IT+0xe4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d102      	bne.n	8000fa8 <HAL_DMA_Abort_IT+0x84>
 8000fa2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fa6:	e00e      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fac:	e00b      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb2:	e008      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb8:	e005      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fbe:	e002      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	e000      	b.n	8000fc6 <HAL_DMA_Abort_IT+0xa2>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	4a11      	ldr	r2, [pc, #68]	; (800100c <HAL_DMA_Abort_IT+0xe8>)
 8000fc8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	4798      	blx	r3
    } 
  }
  return status;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40020008 	.word	0x40020008
 8000ff8:	4002001c 	.word	0x4002001c
 8000ffc:	40020030 	.word	0x40020030
 8001000:	40020044 	.word	0x40020044
 8001004:	40020058 	.word	0x40020058
 8001008:	4002006c 	.word	0x4002006c
 800100c:	40020000 	.word	0x40020000

08001010 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001010:	b480      	push	{r7}
 8001012:	b08b      	sub	sp, #44	; 0x2c
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	e148      	b.n	80012b6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001024:	2201      	movs	r2, #1
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	429a      	cmp	r2, r3
 800103e:	f040 8137 	bne.w	80012b0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4aa3      	ldr	r2, [pc, #652]	; (80012d4 <HAL_GPIO_Init+0x2c4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d05e      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 800104c:	4aa1      	ldr	r2, [pc, #644]	; (80012d4 <HAL_GPIO_Init+0x2c4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d875      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 8001052:	4aa1      	ldr	r2, [pc, #644]	; (80012d8 <HAL_GPIO_Init+0x2c8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d058      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 8001058:	4a9f      	ldr	r2, [pc, #636]	; (80012d8 <HAL_GPIO_Init+0x2c8>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d86f      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 800105e:	4a9f      	ldr	r2, [pc, #636]	; (80012dc <HAL_GPIO_Init+0x2cc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d052      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 8001064:	4a9d      	ldr	r2, [pc, #628]	; (80012dc <HAL_GPIO_Init+0x2cc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d869      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 800106a:	4a9d      	ldr	r2, [pc, #628]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d04c      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 8001070:	4a9b      	ldr	r2, [pc, #620]	; (80012e0 <HAL_GPIO_Init+0x2d0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d863      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 8001076:	4a9b      	ldr	r2, [pc, #620]	; (80012e4 <HAL_GPIO_Init+0x2d4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d046      	beq.n	800110a <HAL_GPIO_Init+0xfa>
 800107c:	4a99      	ldr	r2, [pc, #612]	; (80012e4 <HAL_GPIO_Init+0x2d4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d85d      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 8001082:	2b12      	cmp	r3, #18
 8001084:	d82a      	bhi.n	80010dc <HAL_GPIO_Init+0xcc>
 8001086:	2b12      	cmp	r3, #18
 8001088:	d859      	bhi.n	800113e <HAL_GPIO_Init+0x12e>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <HAL_GPIO_Init+0x80>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	0800110b 	.word	0x0800110b
 8001094:	080010e5 	.word	0x080010e5
 8001098:	080010f7 	.word	0x080010f7
 800109c:	08001139 	.word	0x08001139
 80010a0:	0800113f 	.word	0x0800113f
 80010a4:	0800113f 	.word	0x0800113f
 80010a8:	0800113f 	.word	0x0800113f
 80010ac:	0800113f 	.word	0x0800113f
 80010b0:	0800113f 	.word	0x0800113f
 80010b4:	0800113f 	.word	0x0800113f
 80010b8:	0800113f 	.word	0x0800113f
 80010bc:	0800113f 	.word	0x0800113f
 80010c0:	0800113f 	.word	0x0800113f
 80010c4:	0800113f 	.word	0x0800113f
 80010c8:	0800113f 	.word	0x0800113f
 80010cc:	0800113f 	.word	0x0800113f
 80010d0:	0800113f 	.word	0x0800113f
 80010d4:	080010ed 	.word	0x080010ed
 80010d8:	08001101 	.word	0x08001101
 80010dc:	4a82      	ldr	r2, [pc, #520]	; (80012e8 <HAL_GPIO_Init+0x2d8>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010e2:	e02c      	b.n	800113e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	623b      	str	r3, [r7, #32]
          break;
 80010ea:	e029      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	3304      	adds	r3, #4
 80010f2:	623b      	str	r3, [r7, #32]
          break;
 80010f4:	e024      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	3308      	adds	r3, #8
 80010fc:	623b      	str	r3, [r7, #32]
          break;
 80010fe:	e01f      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	330c      	adds	r3, #12
 8001106:	623b      	str	r3, [r7, #32]
          break;
 8001108:	e01a      	b.n	8001140 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001112:	2304      	movs	r3, #4
 8001114:	623b      	str	r3, [r7, #32]
          break;
 8001116:	e013      	b.n	8001140 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d105      	bne.n	800112c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001120:	2308      	movs	r3, #8
 8001122:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	611a      	str	r2, [r3, #16]
          break;
 800112a:	e009      	b.n	8001140 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800112c:	2308      	movs	r3, #8
 800112e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69fa      	ldr	r2, [r7, #28]
 8001134:	615a      	str	r2, [r3, #20]
          break;
 8001136:	e003      	b.n	8001140 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
          break;
 800113c:	e000      	b.n	8001140 <HAL_GPIO_Init+0x130>
          break;
 800113e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	2bff      	cmp	r3, #255	; 0xff
 8001144:	d801      	bhi.n	800114a <HAL_GPIO_Init+0x13a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	e001      	b.n	800114e <HAL_GPIO_Init+0x13e>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3304      	adds	r3, #4
 800114e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	2bff      	cmp	r3, #255	; 0xff
 8001154:	d802      	bhi.n	800115c <HAL_GPIO_Init+0x14c>
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	e002      	b.n	8001162 <HAL_GPIO_Init+0x152>
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	3b08      	subs	r3, #8
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	210f      	movs	r1, #15
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	6a39      	ldr	r1, [r7, #32]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	431a      	orrs	r2, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 8090 	beq.w	80012b0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001190:	4b56      	ldr	r3, [pc, #344]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a55      	ldr	r2, [pc, #340]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_GPIO_Init+0x2dc>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a8:	4a51      	ldr	r2, [pc, #324]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	089b      	lsrs	r3, r3, #2
 80011ae:	3302      	adds	r3, #2
 80011b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	220f      	movs	r2, #15
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a49      	ldr	r2, [pc, #292]	; (80012f4 <HAL_GPIO_Init+0x2e4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00d      	beq.n	80011f0 <HAL_GPIO_Init+0x1e0>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a48      	ldr	r2, [pc, #288]	; (80012f8 <HAL_GPIO_Init+0x2e8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d007      	beq.n	80011ec <HAL_GPIO_Init+0x1dc>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a47      	ldr	r2, [pc, #284]	; (80012fc <HAL_GPIO_Init+0x2ec>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d101      	bne.n	80011e8 <HAL_GPIO_Init+0x1d8>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e004      	b.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011e8:	2303      	movs	r3, #3
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_GPIO_Init+0x1e2>
 80011f0:	2300      	movs	r3, #0
 80011f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f4:	f002 0203 	and.w	r2, r2, #3
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	4093      	lsls	r3, r2
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001202:	493b      	ldr	r1, [pc, #236]	; (80012f0 <HAL_GPIO_Init+0x2e0>)
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121c:	4b38      	ldr	r3, [pc, #224]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4937      	ldr	r1, [pc, #220]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800122a:	4b35      	ldr	r3, [pc, #212]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	43db      	mvns	r3, r3
 8001232:	4933      	ldr	r1, [pc, #204]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 8001234:	4013      	ands	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001244:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	492d      	ldr	r1, [pc, #180]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	43db      	mvns	r3, r3
 800125a:	4929      	ldr	r1, [pc, #164]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 800125c:	4013      	ands	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	4923      	ldr	r1, [pc, #140]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 800127c:	689a      	ldr	r2, [r3, #8]
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	43db      	mvns	r3, r3
 8001282:	491f      	ldr	r1, [pc, #124]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 8001284:	4013      	ands	r3, r2
 8001286:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d006      	beq.n	80012a2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	4919      	ldr	r1, [pc, #100]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	60cb      	str	r3, [r1, #12]
 80012a0:	e006      	b.n	80012b0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4915      	ldr	r1, [pc, #84]	; (8001300 <HAL_GPIO_Init+0x2f0>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	3301      	adds	r3, #1
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	fa22 f303 	lsr.w	r3, r2, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f47f aeaf 	bne.w	8001024 <HAL_GPIO_Init+0x14>
  }
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	372c      	adds	r7, #44	; 0x2c
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	10320000 	.word	0x10320000
 80012d8:	10310000 	.word	0x10310000
 80012dc:	10220000 	.word	0x10220000
 80012e0:	10210000 	.word	0x10210000
 80012e4:	10120000 	.word	0x10120000
 80012e8:	10110000 	.word	0x10110000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40011000 	.word	0x40011000
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001320:	e003      	b.n	800132a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	041a      	lsls	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	611a      	str	r2, [r3, #16]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4013      	ands	r3, r2
 800134c:	041a      	lsls	r2, r3, #16
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43d9      	mvns	r1, r3
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	400b      	ands	r3, r1
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	611a      	str	r2, [r3, #16]
}
 800135c:	bf00      	nop
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
	...

08001368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e26c      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 8087 	beq.w	8001496 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001388:	4b92      	ldr	r3, [pc, #584]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	2b04      	cmp	r3, #4
 8001392:	d00c      	beq.n	80013ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001394:	4b8f      	ldr	r3, [pc, #572]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b08      	cmp	r3, #8
 800139e:	d112      	bne.n	80013c6 <HAL_RCC_OscConfig+0x5e>
 80013a0:	4b8c      	ldr	r3, [pc, #560]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ac:	d10b      	bne.n	80013c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ae:	4b89      	ldr	r3, [pc, #548]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d06c      	beq.n	8001494 <HAL_RCC_OscConfig+0x12c>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d168      	bne.n	8001494 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e246      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x76>
 80013d0:	4b80      	ldr	r3, [pc, #512]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a7f      	ldr	r2, [pc, #508]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80013d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	e02e      	b.n	800143c <HAL_RCC_OscConfig+0xd4>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x98>
 80013e6:	4b7b      	ldr	r3, [pc, #492]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7a      	ldr	r2, [pc, #488]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b78      	ldr	r3, [pc, #480]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a77      	ldr	r2, [pc, #476]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e01d      	b.n	800143c <HAL_RCC_OscConfig+0xd4>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0xbc>
 800140a:	4b72      	ldr	r3, [pc, #456]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a71      	ldr	r2, [pc, #452]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b6f      	ldr	r3, [pc, #444]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a6e      	ldr	r2, [pc, #440]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0xd4>
 8001424:	4b6b      	ldr	r3, [pc, #428]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a6a      	ldr	r2, [pc, #424]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b68      	ldr	r3, [pc, #416]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a67      	ldr	r2, [pc, #412]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fc1c 	bl	8000c80 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fc18 	bl	8000c80 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	; 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e1fa      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0xe4>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fc08 	bl	8000c80 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fc04 	bl	8000c80 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e1e6      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001486:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x10c>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d063      	beq.n	800156a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014a2:	4b4c      	ldr	r3, [pc, #304]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014ae:	4b49      	ldr	r3, [pc, #292]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d11c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x18c>
 80014ba:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d116      	bne.n	80014f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <HAL_RCC_OscConfig+0x176>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d001      	beq.n	80014de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e1ba      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4939      	ldr	r1, [pc, #228]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f2:	e03a      	b.n	800156a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	691b      	ldr	r3, [r3, #16]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d020      	beq.n	800153e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fc:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <HAL_RCC_OscConfig+0x270>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fbbd 	bl	8000c80 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff fbb9 	bl	8000c80 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e19b      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4927      	ldr	r1, [pc, #156]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <HAL_RCC_OscConfig+0x270>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fb9c 	bl	8000c80 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fb98 	bl	8000c80 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e17a      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d03a      	beq.n	80015ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d019      	beq.n	80015b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001584:	f7ff fb7c 	bl	8000c80 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fb78 	bl	8000c80 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e15a      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f000 fad8 	bl	8001b60 <RCC_Delay>
 80015b0:	e01c      	b.n	80015ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_RCC_OscConfig+0x274>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b8:	f7ff fb62 	bl	8000c80 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015be:	e00f      	b.n	80015e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff fb5e 	bl	8000c80 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d908      	bls.n	80015e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e140      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	42420000 	.word	0x42420000
 80015dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e0:	4b9e      	ldr	r3, [pc, #632]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1e9      	bne.n	80015c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80a6 	beq.w	8001746 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015fe:	4b97      	ldr	r3, [pc, #604]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10d      	bne.n	8001626 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b94      	ldr	r3, [pc, #592]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a93      	ldr	r2, [pc, #588]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	61d3      	str	r3, [r2, #28]
 8001616:	4b91      	ldr	r3, [pc, #580]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001622:	2301      	movs	r3, #1
 8001624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001626:	4b8e      	ldr	r3, [pc, #568]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d118      	bne.n	8001664 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001632:	4b8b      	ldr	r3, [pc, #556]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a8a      	ldr	r2, [pc, #552]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163e:	f7ff fb1f 	bl	8000c80 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001646:	f7ff fb1b 	bl	8000c80 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b64      	cmp	r3, #100	; 0x64
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0fd      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	4b81      	ldr	r3, [pc, #516]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d106      	bne.n	800167a <HAL_RCC_OscConfig+0x312>
 800166c:	4b7b      	ldr	r3, [pc, #492]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a7a      	ldr	r2, [pc, #488]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	e02d      	b.n	80016d6 <HAL_RCC_OscConfig+0x36e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0x334>
 8001682:	4b76      	ldr	r3, [pc, #472]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4a75      	ldr	r2, [pc, #468]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001688:	f023 0301 	bic.w	r3, r3, #1
 800168c:	6213      	str	r3, [r2, #32]
 800168e:	4b73      	ldr	r3, [pc, #460]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4a72      	ldr	r2, [pc, #456]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001694:	f023 0304 	bic.w	r3, r3, #4
 8001698:	6213      	str	r3, [r2, #32]
 800169a:	e01c      	b.n	80016d6 <HAL_RCC_OscConfig+0x36e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d10c      	bne.n	80016be <HAL_RCC_OscConfig+0x356>
 80016a4:	4b6d      	ldr	r3, [pc, #436]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4a6c      	ldr	r2, [pc, #432]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	4b6a      	ldr	r3, [pc, #424]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4a69      	ldr	r2, [pc, #420]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	e00b      	b.n	80016d6 <HAL_RCC_OscConfig+0x36e>
 80016be:	4b67      	ldr	r3, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4a66      	ldr	r2, [pc, #408]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	f023 0301 	bic.w	r3, r3, #1
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	4b64      	ldr	r3, [pc, #400]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a63      	ldr	r2, [pc, #396]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80016d0:	f023 0304 	bic.w	r3, r3, #4
 80016d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d015      	beq.n	800170a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff facf 	bl	8000c80 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff facb 	bl	8000c80 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e0ab      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	4b57      	ldr	r3, [pc, #348]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0ee      	beq.n	80016e6 <HAL_RCC_OscConfig+0x37e>
 8001708:	e014      	b.n	8001734 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170a:	f7ff fab9 	bl	8000c80 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001710:	e00a      	b.n	8001728 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001712:	f7ff fab5 	bl	8000c80 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e095      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001728:	4b4c      	ldr	r3, [pc, #304]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ee      	bne.n	8001712 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001734:	7dfb      	ldrb	r3, [r7, #23]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d105      	bne.n	8001746 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173a:	4b48      	ldr	r3, [pc, #288]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a47      	ldr	r2, [pc, #284]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001744:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8081 	beq.w	8001852 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001750:	4b42      	ldr	r3, [pc, #264]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 030c 	and.w	r3, r3, #12
 8001758:	2b08      	cmp	r3, #8
 800175a:	d061      	beq.n	8001820 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d146      	bne.n	80017f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_RCC_OscConfig+0x4fc>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff fa89 	bl	8000c80 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fa85 	bl	8000c80 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e067      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001784:	4b35      	ldr	r3, [pc, #212]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d108      	bne.n	80017ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	492d      	ldr	r1, [pc, #180]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a19      	ldr	r1, [r3, #32]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	430b      	orrs	r3, r1
 80017be:	4927      	ldr	r1, [pc, #156]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x4fc>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fa59 	bl	8000c80 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d2:	f7ff fa55 	bl	8000c80 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e037      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x46a>
 80017f0:	e02f      	b.n	8001852 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <HAL_RCC_OscConfig+0x4fc>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fa42 	bl	8000c80 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fa3e 	bl	8000c80 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e020      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x498>
 800181e:	e018      	b.n	8001852 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e013      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_RCC_OscConfig+0x4f4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	429a      	cmp	r2, r3
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	40007000 	.word	0x40007000
 8001864:	42420060 	.word	0x42420060

08001868 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0d0      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b6a      	ldr	r3, [pc, #424]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d910      	bls.n	80018ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b67      	ldr	r3, [pc, #412]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 0207 	bic.w	r2, r3, #7
 8001892:	4965      	ldr	r1, [pc, #404]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0b8      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018c4:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4a52      	ldr	r2, [pc, #328]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	494d      	ldr	r1, [pc, #308]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d040      	beq.n	8001988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d107      	bne.n	800191e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	4b47      	ldr	r3, [pc, #284]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d115      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e07f      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e073      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e06b      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001946:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f023 0203 	bic.w	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4936      	ldr	r1, [pc, #216]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001958:	f7ff f992 	bl	8000c80 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	e00a      	b.n	8001976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001960:	f7ff f98e 	bl	8000c80 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e053      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 020c 	and.w	r2, r3, #12
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	429a      	cmp	r2, r3
 8001986:	d1eb      	bne.n	8001960 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001988:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d210      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4922      	ldr	r1, [pc, #136]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e032      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4916      	ldr	r1, [pc, #88]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	490e      	ldr	r1, [pc, #56]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019f6:	f000 f821 	bl	8001a3c <HAL_RCC_GetSysClockFreq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_RCC_ClockConfig+0x1cc>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a12:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <HAL_RCC_ClockConfig+0x1d0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f8f0 	bl	8000bfc <HAL_InitTick>

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	08003e38 	.word	0x08003e38
 8001a34:	2000000c 	.word	0x2000000c
 8001a38:	20000010 	.word	0x20000010

08001a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a3c:	b490      	push	{r4, r7}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a42:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a44:	1d3c      	adds	r4, r7, #4
 8001a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a4c:	f240 2301 	movw	r3, #513	; 0x201
 8001a50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a66:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d002      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x40>
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d003      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x46>
 8001a7a:	e02d      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a7e:	623b      	str	r3, [r7, #32]
      break;
 8001a80:	e02d      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	0c9b      	lsrs	r3, r3, #18
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a8e:	4413      	add	r3, r2
 8001a90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	0c5b      	lsrs	r3, r3, #17
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001aae:	4413      	add	r3, r2
 8001ab0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ab4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aba:	fb02 f203 	mul.w	r2, r2, r3
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac6:	e004      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	4a0b      	ldr	r2, [pc, #44]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	623b      	str	r3, [r7, #32]
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ada:	623b      	str	r3, [r7, #32]
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	6a3b      	ldr	r3, [r7, #32]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc90      	pop	{r4, r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	08003e28 	.word	0x08003e28
 8001af0:	40021000 	.word	0x40021000
 8001af4:	007a1200 	.word	0x007a1200
 8001af8:	003d0900 	.word	0x003d0900

08001afc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b00:	4b02      	ldr	r3, [pc, #8]	; (8001b0c <HAL_RCC_GetHCLKFreq+0x10>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	2000000c 	.word	0x2000000c

08001b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b14:	f7ff fff2 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	4903      	ldr	r1, [pc, #12]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b26:	5ccb      	ldrb	r3, [r1, r3]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08003e48 	.word	0x08003e48

08001b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b3c:	f7ff ffde 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	0adb      	lsrs	r3, r3, #11
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	4903      	ldr	r1, [pc, #12]	; (8001b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b4e:	5ccb      	ldrb	r3, [r1, r3]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08003e48 	.word	0x08003e48

08001b60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <RCC_Delay+0x34>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <RCC_Delay+0x38>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	0a5b      	lsrs	r3, r3, #9
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b7c:	bf00      	nop
  }
  while (Delay --);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1e5a      	subs	r2, r3, #1
 8001b82:	60fa      	str	r2, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f9      	bne.n	8001b7c <RCC_Delay+0x1c>
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	2000000c 	.word	0x2000000c
 8001b98:	10624dd3 	.word	0x10624dd3

08001b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e041      	b.n	8001c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7fe fe62 	bl	800088c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f000 fa6a 	bl	80020b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d001      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e035      	b.n	8001cc0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a16      	ldr	r2, [pc, #88]	; (8001ccc <HAL_TIM_Base_Start_IT+0x90>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d009      	beq.n	8001c8a <HAL_TIM_Base_Start_IT+0x4e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7e:	d004      	beq.n	8001c8a <HAL_TIM_Base_Start_IT+0x4e>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <HAL_TIM_Base_Start_IT+0x94>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d111      	bne.n	8001cae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b06      	cmp	r3, #6
 8001c9a:	d010      	beq.n	8001cbe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cac:	e007      	b.n	8001cbe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f042 0201 	orr.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40012c00 	.word	0x40012c00
 8001cd0:	40000400 	.word	0x40000400

08001cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d122      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d11b      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f06f 0202 	mvn.w	r2, #2
 8001d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f9b1 	bl	800207e <HAL_TIM_IC_CaptureCallback>
 8001d1c:	e005      	b.n	8001d2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f9a4 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f9b3 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d122      	bne.n	8001d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d11b      	bne.n	8001d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0204 	mvn.w	r2, #4
 8001d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2202      	movs	r2, #2
 8001d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f987 	bl	800207e <HAL_TIM_IC_CaptureCallback>
 8001d70:	e005      	b.n	8001d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f97a 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f989 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0208 	mvn.w	r2, #8
 8001da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2204      	movs	r2, #4
 8001dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f95d 	bl	800207e <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f950 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f95f 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0210 	mvn.w	r2, #16
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2208      	movs	r2, #8
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f933 	bl	800207e <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f926 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f935 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d10e      	bne.n	8001e58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d107      	bne.n	8001e58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0201 	mvn.w	r2, #1
 8001e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fcd4 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e62:	2b80      	cmp	r3, #128	; 0x80
 8001e64:	d10e      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e70:	2b80      	cmp	r3, #128	; 0x80
 8001e72:	d107      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fa67 	bl	8002352 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	2b40      	cmp	r3, #64	; 0x40
 8001e90:	d10e      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9c:	2b40      	cmp	r3, #64	; 0x40
 8001e9e:	d107      	bne.n	8001eb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8f9 	bl	80020a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b20      	cmp	r3, #32
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d107      	bne.n	8001edc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0220 	mvn.w	r2, #32
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fa32 	bl	8002340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_TIM_ConfigClockSource+0x18>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e0b3      	b.n	8002064 <HAL_TIM_ConfigClockSource+0x180>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001f1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f34:	d03e      	beq.n	8001fb4 <HAL_TIM_ConfigClockSource+0xd0>
 8001f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3a:	f200 8087 	bhi.w	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f42:	f000 8085 	beq.w	8002050 <HAL_TIM_ConfigClockSource+0x16c>
 8001f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4a:	d87f      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f4c:	2b70      	cmp	r3, #112	; 0x70
 8001f4e:	d01a      	beq.n	8001f86 <HAL_TIM_ConfigClockSource+0xa2>
 8001f50:	2b70      	cmp	r3, #112	; 0x70
 8001f52:	d87b      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f54:	2b60      	cmp	r3, #96	; 0x60
 8001f56:	d050      	beq.n	8001ffa <HAL_TIM_ConfigClockSource+0x116>
 8001f58:	2b60      	cmp	r3, #96	; 0x60
 8001f5a:	d877      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f5c:	2b50      	cmp	r3, #80	; 0x50
 8001f5e:	d03c      	beq.n	8001fda <HAL_TIM_ConfigClockSource+0xf6>
 8001f60:	2b50      	cmp	r3, #80	; 0x50
 8001f62:	d873      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d058      	beq.n	800201a <HAL_TIM_ConfigClockSource+0x136>
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d86f      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f6c:	2b30      	cmp	r3, #48	; 0x30
 8001f6e:	d064      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
 8001f70:	2b30      	cmp	r3, #48	; 0x30
 8001f72:	d86b      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d060      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d867      	bhi.n	800204c <HAL_TIM_ConfigClockSource+0x168>
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d05c      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d05a      	beq.n	800203a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001f84:	e062      	b.n	800204c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6899      	ldr	r1, [r3, #8]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f000 f95c 	bl	8002252 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001fa8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	609a      	str	r2, [r3, #8]
      break;
 8001fb2:	e04e      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6899      	ldr	r1, [r3, #8]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f000 f945 	bl	8002252 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001fd6:	609a      	str	r2, [r3, #8]
      break;
 8001fd8:	e03b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	6859      	ldr	r1, [r3, #4]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f000 f8bc 	bl	8002164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2150      	movs	r1, #80	; 0x50
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f913 	bl	800221e <TIM_ITRx_SetConfig>
      break;
 8001ff8:	e02b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6818      	ldr	r0, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	461a      	mov	r2, r3
 8002008:	f000 f8da 	bl	80021c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2160      	movs	r1, #96	; 0x60
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f903 	bl	800221e <TIM_ITRx_SetConfig>
      break;
 8002018:	e01b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	461a      	mov	r2, r3
 8002028:	f000 f89c 	bl	8002164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2140      	movs	r1, #64	; 0x40
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f8f3 	bl	800221e <TIM_ITRx_SetConfig>
      break;
 8002038:	e00b      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4619      	mov	r1, r3
 8002044:	4610      	mov	r0, r2
 8002046:	f000 f8ea 	bl	800221e <TIM_ITRx_SetConfig>
        break;
 800204a:	e002      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800204c:	bf00      	nop
 800204e:	e000      	b.n	8002052 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002050:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a25      	ldr	r2, [pc, #148]	; (800215c <TIM_Base_SetConfig+0xa8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d007      	beq.n	80020dc <TIM_Base_SetConfig+0x28>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d2:	d003      	beq.n	80020dc <TIM_Base_SetConfig+0x28>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a22      	ldr	r2, [pc, #136]	; (8002160 <TIM_Base_SetConfig+0xac>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d108      	bne.n	80020ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1a      	ldr	r2, [pc, #104]	; (800215c <TIM_Base_SetConfig+0xa8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d007      	beq.n	8002106 <TIM_Base_SetConfig+0x52>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fc:	d003      	beq.n	8002106 <TIM_Base_SetConfig+0x52>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a17      	ldr	r2, [pc, #92]	; (8002160 <TIM_Base_SetConfig+0xac>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d108      	bne.n	8002118 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a07      	ldr	r2, [pc, #28]	; (800215c <TIM_Base_SetConfig+0xa8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d103      	bne.n	800214c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	615a      	str	r2, [r3, #20]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40000400 	.word	0x40000400

08002164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f023 0201 	bic.w	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800218e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f023 030a 	bic.w	r3, r3, #10
 80021a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	621a      	str	r2, [r3, #32]
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f023 0210 	bic.w	r2, r3, #16
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	699b      	ldr	r3, [r3, #24]
 80021dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80021ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	031b      	lsls	r3, r3, #12
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80021fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	621a      	str	r2, [r3, #32]
}
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	f043 0307 	orr.w	r3, r3, #7
 8002240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	609a      	str	r2, [r3, #8]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002252:	b480      	push	{r7}
 8002254:	b087      	sub	sp, #28
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800226c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	021a      	lsls	r2, r3, #8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	431a      	orrs	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	4313      	orrs	r3, r2
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	609a      	str	r2, [r3, #8]
}
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e041      	b.n	800232c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d009      	beq.n	8002300 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f4:	d004      	beq.n	8002300 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a10      	ldr	r2, [pc, #64]	; (800233c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d10c      	bne.n	800231a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002306:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	4313      	orrs	r3, r2
 8002310:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40012c00 	.word	0x40012c00
 800233c:	40000400 	.word	0x40000400

08002340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e03f      	b.n	80023f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe faa2 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2224      	movs	r2, #36	; 0x24
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68da      	ldr	r2, [r3, #12]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fc25 	bl	8002bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b08a      	sub	sp, #40	; 0x28
 8002402:	af02      	add	r7, sp, #8
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	4613      	mov	r3, r2
 800240c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b20      	cmp	r3, #32
 800241c:	d17c      	bne.n	8002518 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_UART_Transmit+0x2c>
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e075      	b.n	800251a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_UART_Transmit+0x3e>
 8002438:	2302      	movs	r3, #2
 800243a:	e06e      	b.n	800251a <HAL_UART_Transmit+0x11c>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2221      	movs	r2, #33	; 0x21
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002452:	f7fe fc15 	bl	8000c80 <HAL_GetTick>
 8002456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800246c:	d108      	bne.n	8002480 <HAL_UART_Transmit+0x82>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d104      	bne.n	8002480 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002476:	2300      	movs	r3, #0
 8002478:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	e003      	b.n	8002488 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002490:	e02a      	b.n	80024e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2200      	movs	r2, #0
 800249a:	2180      	movs	r1, #128	; 0x80
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fa11 	bl	80028c4 <UART_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e036      	b.n	800251a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10b      	bne.n	80024ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	3302      	adds	r3, #2
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	e007      	b.n	80024da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	781a      	ldrb	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	3301      	adds	r3, #1
 80024d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1cf      	bne.n	8002492 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2200      	movs	r2, #0
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f9e1 	bl	80028c4 <UART_WaitOnFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e006      	b.n	800251a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_UART_IRQHandler+0x52>
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa99 	bl	8002aa6 <UART_Receive_IT>
      return;
 8002574:	e17b      	b.n	800286e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80b1 	beq.w	80026e0 <HAL_UART_IRQHandler+0x1bc>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_UART_IRQHandler+0x70>
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80a6 	beq.w	80026e0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_UART_IRQHandler+0x90>
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_UART_IRQHandler+0xb0>
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d005      	beq.n	80025d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f043 0202 	orr.w	r2, r3, #2
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_UART_IRQHandler+0xd0>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f043 0204 	orr.w	r2, r3, #4
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00f      	beq.n	800261e <HAL_UART_IRQHandler+0xfa>
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d104      	bne.n	8002612 <HAL_UART_IRQHandler+0xee>
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f043 0208 	orr.w	r2, r3, #8
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 811e 	beq.w	8002864 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_UART_IRQHandler+0x11e>
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	f003 0320 	and.w	r3, r3, #32
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fa32 	bl	8002aa6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <HAL_UART_IRQHandler+0x146>
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d031      	beq.n	80026ce <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f974 	bl	8002958 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d023      	beq.n	80026c6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	2b00      	cmp	r3, #0
 8002694:	d013      	beq.n	80026be <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	4a76      	ldr	r2, [pc, #472]	; (8002874 <HAL_UART_IRQHandler+0x350>)
 800269c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fc3e 	bl	8000f24 <HAL_DMA_Abort_IT>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026b8:	4610      	mov	r0, r2
 80026ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026bc:	e00e      	b.n	80026dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f8ec 	bl	800289c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c4:	e00a      	b.n	80026dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f8e8 	bl	800289c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026cc:	e006      	b.n	80026dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8e4 	bl	800289c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026da:	e0c3      	b.n	8002864 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	bf00      	nop
    return;
 80026de:	e0c1      	b.n	8002864 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	f040 80a1 	bne.w	800282c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 809b 	beq.w	800282c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8095 	beq.w	800282c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d04e      	beq.n	80027c4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002730:	8a3b      	ldrh	r3, [r7, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8098 	beq.w	8002868 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800273c:	8a3a      	ldrh	r2, [r7, #16]
 800273e:	429a      	cmp	r2, r3
 8002740:	f080 8092 	bcs.w	8002868 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8a3a      	ldrh	r2, [r7, #16]
 8002748:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b20      	cmp	r3, #32
 8002752:	d02b      	beq.n	80027ac <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002762:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002782:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0210 	bic.w	r2, r2, #16
 80027a0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fb81 	bl	8000eae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f876 	bl	80028ae <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80027c2:	e051      	b.n	8002868 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d047      	beq.n	800286c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80027dc:	8a7b      	ldrh	r3, [r7, #18]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d044      	beq.n	800286c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027f0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 0201 	bic.w	r2, r2, #1
 8002800:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0210 	bic.w	r2, r2, #16
 800281e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002820:	8a7b      	ldrh	r3, [r7, #18]
 8002822:	4619      	mov	r1, r3
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f842 	bl	80028ae <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800282a:	e01f      	b.n	800286c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_UART_IRQHandler+0x324>
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8c9 	bl	80029d8 <UART_Transmit_IT>
    return;
 8002846:	e012      	b.n	800286e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00d      	beq.n	800286e <HAL_UART_IRQHandler+0x34a>
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f90a 	bl	8002a76 <UART_EndTransmit_IT>
    return;
 8002862:	e004      	b.n	800286e <HAL_UART_IRQHandler+0x34a>
    return;
 8002864:	bf00      	nop
 8002866:	e002      	b.n	800286e <HAL_UART_IRQHandler+0x34a>
      return;
 8002868:	bf00      	nop
 800286a:	e000      	b.n	800286e <HAL_UART_IRQHandler+0x34a>
      return;
 800286c:	bf00      	nop
  }
}
 800286e:	3728      	adds	r7, #40	; 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	080029b1 	.word	0x080029b1

08002878 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d4:	e02c      	b.n	8002930 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d028      	beq.n	8002930 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80028e4:	f7fe f9cc 	bl	8000c80 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d21d      	bcs.n	8002930 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002902:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e00f      	b.n	8002950 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4013      	ands	r3, r2
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	429a      	cmp	r2, r3
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	429a      	cmp	r2, r3
 800294c:	d0c3      	beq.n	80028d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800296e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	2b01      	cmp	r3, #1
 8002986:	d107      	bne.n	8002998 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0210 	bic.w	r2, r2, #16
 8002996:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2220      	movs	r2, #32
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7ff ff66 	bl	800289c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b21      	cmp	r3, #33	; 0x21
 80029ea:	d13e      	bne.n	8002a6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f4:	d114      	bne.n	8002a20 <UART_Transmit_IT+0x48>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d110      	bne.n	8002a20 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	1c9a      	adds	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	621a      	str	r2, [r3, #32]
 8002a1e:	e008      	b.n	8002a32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	1c59      	adds	r1, r3, #1
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6211      	str	r1, [r2, #32]
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b082      	sub	sp, #8
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff feee 	bl	8002878 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b086      	sub	sp, #24
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b22      	cmp	r3, #34	; 0x22
 8002ab8:	f040 8099 	bne.w	8002bee <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac4:	d117      	bne.n	8002af6 <UART_Receive_IT+0x50>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d113      	bne.n	8002af6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	1c9a      	adds	r2, r3, #2
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
 8002af4:	e026      	b.n	8002b44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b08:	d007      	beq.n	8002b1a <UART_Receive_IT+0x74>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10a      	bne.n	8002b28 <UART_Receive_IT+0x82>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e008      	b.n	8002b3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4619      	mov	r1, r3
 8002b52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d148      	bne.n	8002bea <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0220 	bic.w	r2, r2, #32
 8002b66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d123      	bne.n	8002be0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0210 	bic.w	r2, r2, #16
 8002bac:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d10a      	bne.n	8002bd2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff fe68 	bl	80028ae <HAL_UARTEx_RxEventCallback>
 8002bde:	e002      	b.n	8002be6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fe52 	bl	800288a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e002      	b.n	8002bf0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c32:	f023 030c 	bic.w	r3, r3, #12
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2c      	ldr	r2, [pc, #176]	; (8002d0c <UART_SetConfig+0x114>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c60:	f7fe ff6a 	bl	8001b38 <HAL_RCC_GetPCLK2Freq>
 8002c64:	60f8      	str	r0, [r7, #12]
 8002c66:	e002      	b.n	8002c6e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c68:	f7fe ff52 	bl	8001b10 <HAL_RCC_GetPCLK1Freq>
 8002c6c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009a      	lsls	r2, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	4a22      	ldr	r2, [pc, #136]	; (8002d10 <UART_SetConfig+0x118>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	0119      	lsls	r1, r3, #4
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	009a      	lsls	r2, r3, #2
 8002c98:	441a      	add	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <UART_SetConfig+0x118>)
 8002ca6:	fba3 0302 	umull	r0, r3, r3, r2
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2064      	movs	r0, #100	; 0x64
 8002cae:	fb00 f303 	mul.w	r3, r0, r3
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	3332      	adds	r3, #50	; 0x32
 8002cb8:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <UART_SetConfig+0x118>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cc4:	4419      	add	r1, r3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	009a      	lsls	r2, r3, #2
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <UART_SetConfig+0x118>)
 8002cde:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2064      	movs	r0, #100	; 0x64
 8002ce6:	fb00 f303 	mul.w	r3, r0, r3
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	3332      	adds	r3, #50	; 0x32
 8002cf0:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <UART_SetConfig+0x118>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	440a      	add	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d04:	bf00      	nop
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	51eb851f 	.word	0x51eb851f

08002d14 <__errno>:
 8002d14:	4b01      	ldr	r3, [pc, #4]	; (8002d1c <__errno+0x8>)
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000018 	.word	0x20000018

08002d20 <__libc_init_array>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	2600      	movs	r6, #0
 8002d24:	4d0c      	ldr	r5, [pc, #48]	; (8002d58 <__libc_init_array+0x38>)
 8002d26:	4c0d      	ldr	r4, [pc, #52]	; (8002d5c <__libc_init_array+0x3c>)
 8002d28:	1b64      	subs	r4, r4, r5
 8002d2a:	10a4      	asrs	r4, r4, #2
 8002d2c:	42a6      	cmp	r6, r4
 8002d2e:	d109      	bne.n	8002d44 <__libc_init_array+0x24>
 8002d30:	f000 fff8 	bl	8003d24 <_init>
 8002d34:	2600      	movs	r6, #0
 8002d36:	4d0a      	ldr	r5, [pc, #40]	; (8002d60 <__libc_init_array+0x40>)
 8002d38:	4c0a      	ldr	r4, [pc, #40]	; (8002d64 <__libc_init_array+0x44>)
 8002d3a:	1b64      	subs	r4, r4, r5
 8002d3c:	10a4      	asrs	r4, r4, #2
 8002d3e:	42a6      	cmp	r6, r4
 8002d40:	d105      	bne.n	8002d4e <__libc_init_array+0x2e>
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
 8002d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d48:	4798      	blx	r3
 8002d4a:	3601      	adds	r6, #1
 8002d4c:	e7ee      	b.n	8002d2c <__libc_init_array+0xc>
 8002d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d52:	4798      	blx	r3
 8002d54:	3601      	adds	r6, #1
 8002d56:	e7f2      	b.n	8002d3e <__libc_init_array+0x1e>
 8002d58:	08003ee8 	.word	0x08003ee8
 8002d5c:	08003ee8 	.word	0x08003ee8
 8002d60:	08003ee8 	.word	0x08003ee8
 8002d64:	08003eec 	.word	0x08003eec

08002d68 <memset>:
 8002d68:	4603      	mov	r3, r0
 8002d6a:	4402      	add	r2, r0
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d100      	bne.n	8002d72 <memset+0xa>
 8002d70:	4770      	bx	lr
 8002d72:	f803 1b01 	strb.w	r1, [r3], #1
 8002d76:	e7f9      	b.n	8002d6c <memset+0x4>

08002d78 <iprintf>:
 8002d78:	b40f      	push	{r0, r1, r2, r3}
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <iprintf+0x2c>)
 8002d7c:	b513      	push	{r0, r1, r4, lr}
 8002d7e:	681c      	ldr	r4, [r3, #0]
 8002d80:	b124      	cbz	r4, 8002d8c <iprintf+0x14>
 8002d82:	69a3      	ldr	r3, [r4, #24]
 8002d84:	b913      	cbnz	r3, 8002d8c <iprintf+0x14>
 8002d86:	4620      	mov	r0, r4
 8002d88:	f000 fa5e 	bl	8003248 <__sinit>
 8002d8c:	ab05      	add	r3, sp, #20
 8002d8e:	4620      	mov	r0, r4
 8002d90:	9a04      	ldr	r2, [sp, #16]
 8002d92:	68a1      	ldr	r1, [r4, #8]
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	f000 fc29 	bl	80035ec <_vfiprintf_r>
 8002d9a:	b002      	add	sp, #8
 8002d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002da0:	b004      	add	sp, #16
 8002da2:	4770      	bx	lr
 8002da4:	20000018 	.word	0x20000018

08002da8 <_puts_r>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	460e      	mov	r6, r1
 8002dac:	4605      	mov	r5, r0
 8002dae:	b118      	cbz	r0, 8002db8 <_puts_r+0x10>
 8002db0:	6983      	ldr	r3, [r0, #24]
 8002db2:	b90b      	cbnz	r3, 8002db8 <_puts_r+0x10>
 8002db4:	f000 fa48 	bl	8003248 <__sinit>
 8002db8:	69ab      	ldr	r3, [r5, #24]
 8002dba:	68ac      	ldr	r4, [r5, #8]
 8002dbc:	b913      	cbnz	r3, 8002dc4 <_puts_r+0x1c>
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f000 fa42 	bl	8003248 <__sinit>
 8002dc4:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <_puts_r+0xd0>)
 8002dc6:	429c      	cmp	r4, r3
 8002dc8:	d120      	bne.n	8002e0c <_puts_r+0x64>
 8002dca:	686c      	ldr	r4, [r5, #4]
 8002dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dce:	07db      	lsls	r3, r3, #31
 8002dd0:	d405      	bmi.n	8002dde <_puts_r+0x36>
 8002dd2:	89a3      	ldrh	r3, [r4, #12]
 8002dd4:	0598      	lsls	r0, r3, #22
 8002dd6:	d402      	bmi.n	8002dde <_puts_r+0x36>
 8002dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002dda:	f000 fad3 	bl	8003384 <__retarget_lock_acquire_recursive>
 8002dde:	89a3      	ldrh	r3, [r4, #12]
 8002de0:	0719      	lsls	r1, r3, #28
 8002de2:	d51d      	bpl.n	8002e20 <_puts_r+0x78>
 8002de4:	6923      	ldr	r3, [r4, #16]
 8002de6:	b1db      	cbz	r3, 8002e20 <_puts_r+0x78>
 8002de8:	3e01      	subs	r6, #1
 8002dea:	68a3      	ldr	r3, [r4, #8]
 8002dec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002df0:	3b01      	subs	r3, #1
 8002df2:	60a3      	str	r3, [r4, #8]
 8002df4:	bb39      	cbnz	r1, 8002e46 <_puts_r+0x9e>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	da38      	bge.n	8002e6c <_puts_r+0xc4>
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	210a      	movs	r1, #10
 8002dfe:	4628      	mov	r0, r5
 8002e00:	f000 f848 	bl	8002e94 <__swbuf_r>
 8002e04:	3001      	adds	r0, #1
 8002e06:	d011      	beq.n	8002e2c <_puts_r+0x84>
 8002e08:	250a      	movs	r5, #10
 8002e0a:	e011      	b.n	8002e30 <_puts_r+0x88>
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <_puts_r+0xd4>)
 8002e0e:	429c      	cmp	r4, r3
 8002e10:	d101      	bne.n	8002e16 <_puts_r+0x6e>
 8002e12:	68ac      	ldr	r4, [r5, #8]
 8002e14:	e7da      	b.n	8002dcc <_puts_r+0x24>
 8002e16:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <_puts_r+0xd8>)
 8002e18:	429c      	cmp	r4, r3
 8002e1a:	bf08      	it	eq
 8002e1c:	68ec      	ldreq	r4, [r5, #12]
 8002e1e:	e7d5      	b.n	8002dcc <_puts_r+0x24>
 8002e20:	4621      	mov	r1, r4
 8002e22:	4628      	mov	r0, r5
 8002e24:	f000 f888 	bl	8002f38 <__swsetup_r>
 8002e28:	2800      	cmp	r0, #0
 8002e2a:	d0dd      	beq.n	8002de8 <_puts_r+0x40>
 8002e2c:	f04f 35ff 	mov.w	r5, #4294967295
 8002e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e32:	07da      	lsls	r2, r3, #31
 8002e34:	d405      	bmi.n	8002e42 <_puts_r+0x9a>
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	059b      	lsls	r3, r3, #22
 8002e3a:	d402      	bmi.n	8002e42 <_puts_r+0x9a>
 8002e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e3e:	f000 faa2 	bl	8003386 <__retarget_lock_release_recursive>
 8002e42:	4628      	mov	r0, r5
 8002e44:	bd70      	pop	{r4, r5, r6, pc}
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	da04      	bge.n	8002e54 <_puts_r+0xac>
 8002e4a:	69a2      	ldr	r2, [r4, #24]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	dc06      	bgt.n	8002e5e <_puts_r+0xb6>
 8002e50:	290a      	cmp	r1, #10
 8002e52:	d004      	beq.n	8002e5e <_puts_r+0xb6>
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	6022      	str	r2, [r4, #0]
 8002e5a:	7019      	strb	r1, [r3, #0]
 8002e5c:	e7c5      	b.n	8002dea <_puts_r+0x42>
 8002e5e:	4622      	mov	r2, r4
 8002e60:	4628      	mov	r0, r5
 8002e62:	f000 f817 	bl	8002e94 <__swbuf_r>
 8002e66:	3001      	adds	r0, #1
 8002e68:	d1bf      	bne.n	8002dea <_puts_r+0x42>
 8002e6a:	e7df      	b.n	8002e2c <_puts_r+0x84>
 8002e6c:	250a      	movs	r5, #10
 8002e6e:	6823      	ldr	r3, [r4, #0]
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	6022      	str	r2, [r4, #0]
 8002e74:	701d      	strb	r5, [r3, #0]
 8002e76:	e7db      	b.n	8002e30 <_puts_r+0x88>
 8002e78:	08003e74 	.word	0x08003e74
 8002e7c:	08003e94 	.word	0x08003e94
 8002e80:	08003e54 	.word	0x08003e54

08002e84 <puts>:
 8002e84:	4b02      	ldr	r3, [pc, #8]	; (8002e90 <puts+0xc>)
 8002e86:	4601      	mov	r1, r0
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	f7ff bf8d 	b.w	8002da8 <_puts_r>
 8002e8e:	bf00      	nop
 8002e90:	20000018 	.word	0x20000018

08002e94 <__swbuf_r>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	460e      	mov	r6, r1
 8002e98:	4614      	mov	r4, r2
 8002e9a:	4605      	mov	r5, r0
 8002e9c:	b118      	cbz	r0, 8002ea6 <__swbuf_r+0x12>
 8002e9e:	6983      	ldr	r3, [r0, #24]
 8002ea0:	b90b      	cbnz	r3, 8002ea6 <__swbuf_r+0x12>
 8002ea2:	f000 f9d1 	bl	8003248 <__sinit>
 8002ea6:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <__swbuf_r+0x98>)
 8002ea8:	429c      	cmp	r4, r3
 8002eaa:	d12b      	bne.n	8002f04 <__swbuf_r+0x70>
 8002eac:	686c      	ldr	r4, [r5, #4]
 8002eae:	69a3      	ldr	r3, [r4, #24]
 8002eb0:	60a3      	str	r3, [r4, #8]
 8002eb2:	89a3      	ldrh	r3, [r4, #12]
 8002eb4:	071a      	lsls	r2, r3, #28
 8002eb6:	d52f      	bpl.n	8002f18 <__swbuf_r+0x84>
 8002eb8:	6923      	ldr	r3, [r4, #16]
 8002eba:	b36b      	cbz	r3, 8002f18 <__swbuf_r+0x84>
 8002ebc:	6923      	ldr	r3, [r4, #16]
 8002ebe:	6820      	ldr	r0, [r4, #0]
 8002ec0:	b2f6      	uxtb	r6, r6
 8002ec2:	1ac0      	subs	r0, r0, r3
 8002ec4:	6963      	ldr	r3, [r4, #20]
 8002ec6:	4637      	mov	r7, r6
 8002ec8:	4283      	cmp	r3, r0
 8002eca:	dc04      	bgt.n	8002ed6 <__swbuf_r+0x42>
 8002ecc:	4621      	mov	r1, r4
 8002ece:	4628      	mov	r0, r5
 8002ed0:	f000 f926 	bl	8003120 <_fflush_r>
 8002ed4:	bb30      	cbnz	r0, 8002f24 <__swbuf_r+0x90>
 8002ed6:	68a3      	ldr	r3, [r4, #8]
 8002ed8:	3001      	adds	r0, #1
 8002eda:	3b01      	subs	r3, #1
 8002edc:	60a3      	str	r3, [r4, #8]
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	6022      	str	r2, [r4, #0]
 8002ee4:	701e      	strb	r6, [r3, #0]
 8002ee6:	6963      	ldr	r3, [r4, #20]
 8002ee8:	4283      	cmp	r3, r0
 8002eea:	d004      	beq.n	8002ef6 <__swbuf_r+0x62>
 8002eec:	89a3      	ldrh	r3, [r4, #12]
 8002eee:	07db      	lsls	r3, r3, #31
 8002ef0:	d506      	bpl.n	8002f00 <__swbuf_r+0x6c>
 8002ef2:	2e0a      	cmp	r6, #10
 8002ef4:	d104      	bne.n	8002f00 <__swbuf_r+0x6c>
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f000 f911 	bl	8003120 <_fflush_r>
 8002efe:	b988      	cbnz	r0, 8002f24 <__swbuf_r+0x90>
 8002f00:	4638      	mov	r0, r7
 8002f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f04:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <__swbuf_r+0x9c>)
 8002f06:	429c      	cmp	r4, r3
 8002f08:	d101      	bne.n	8002f0e <__swbuf_r+0x7a>
 8002f0a:	68ac      	ldr	r4, [r5, #8]
 8002f0c:	e7cf      	b.n	8002eae <__swbuf_r+0x1a>
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <__swbuf_r+0xa0>)
 8002f10:	429c      	cmp	r4, r3
 8002f12:	bf08      	it	eq
 8002f14:	68ec      	ldreq	r4, [r5, #12]
 8002f16:	e7ca      	b.n	8002eae <__swbuf_r+0x1a>
 8002f18:	4621      	mov	r1, r4
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f000 f80c 	bl	8002f38 <__swsetup_r>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	d0cb      	beq.n	8002ebc <__swbuf_r+0x28>
 8002f24:	f04f 37ff 	mov.w	r7, #4294967295
 8002f28:	e7ea      	b.n	8002f00 <__swbuf_r+0x6c>
 8002f2a:	bf00      	nop
 8002f2c:	08003e74 	.word	0x08003e74
 8002f30:	08003e94 	.word	0x08003e94
 8002f34:	08003e54 	.word	0x08003e54

08002f38 <__swsetup_r>:
 8002f38:	4b32      	ldr	r3, [pc, #200]	; (8003004 <__swsetup_r+0xcc>)
 8002f3a:	b570      	push	{r4, r5, r6, lr}
 8002f3c:	681d      	ldr	r5, [r3, #0]
 8002f3e:	4606      	mov	r6, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	b125      	cbz	r5, 8002f4e <__swsetup_r+0x16>
 8002f44:	69ab      	ldr	r3, [r5, #24]
 8002f46:	b913      	cbnz	r3, 8002f4e <__swsetup_r+0x16>
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f000 f97d 	bl	8003248 <__sinit>
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	; (8003008 <__swsetup_r+0xd0>)
 8002f50:	429c      	cmp	r4, r3
 8002f52:	d10f      	bne.n	8002f74 <__swsetup_r+0x3c>
 8002f54:	686c      	ldr	r4, [r5, #4]
 8002f56:	89a3      	ldrh	r3, [r4, #12]
 8002f58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f5c:	0719      	lsls	r1, r3, #28
 8002f5e:	d42c      	bmi.n	8002fba <__swsetup_r+0x82>
 8002f60:	06dd      	lsls	r5, r3, #27
 8002f62:	d411      	bmi.n	8002f88 <__swsetup_r+0x50>
 8002f64:	2309      	movs	r3, #9
 8002f66:	6033      	str	r3, [r6, #0]
 8002f68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f70:	81a3      	strh	r3, [r4, #12]
 8002f72:	e03e      	b.n	8002ff2 <__swsetup_r+0xba>
 8002f74:	4b25      	ldr	r3, [pc, #148]	; (800300c <__swsetup_r+0xd4>)
 8002f76:	429c      	cmp	r4, r3
 8002f78:	d101      	bne.n	8002f7e <__swsetup_r+0x46>
 8002f7a:	68ac      	ldr	r4, [r5, #8]
 8002f7c:	e7eb      	b.n	8002f56 <__swsetup_r+0x1e>
 8002f7e:	4b24      	ldr	r3, [pc, #144]	; (8003010 <__swsetup_r+0xd8>)
 8002f80:	429c      	cmp	r4, r3
 8002f82:	bf08      	it	eq
 8002f84:	68ec      	ldreq	r4, [r5, #12]
 8002f86:	e7e6      	b.n	8002f56 <__swsetup_r+0x1e>
 8002f88:	0758      	lsls	r0, r3, #29
 8002f8a:	d512      	bpl.n	8002fb2 <__swsetup_r+0x7a>
 8002f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f8e:	b141      	cbz	r1, 8002fa2 <__swsetup_r+0x6a>
 8002f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f94:	4299      	cmp	r1, r3
 8002f96:	d002      	beq.n	8002f9e <__swsetup_r+0x66>
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f000 fa59 	bl	8003450 <_free_r>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8002fa2:	89a3      	ldrh	r3, [r4, #12]
 8002fa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fa8:	81a3      	strh	r3, [r4, #12]
 8002faa:	2300      	movs	r3, #0
 8002fac:	6063      	str	r3, [r4, #4]
 8002fae:	6923      	ldr	r3, [r4, #16]
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	f043 0308 	orr.w	r3, r3, #8
 8002fb8:	81a3      	strh	r3, [r4, #12]
 8002fba:	6923      	ldr	r3, [r4, #16]
 8002fbc:	b94b      	cbnz	r3, 8002fd2 <__swsetup_r+0x9a>
 8002fbe:	89a3      	ldrh	r3, [r4, #12]
 8002fc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc8:	d003      	beq.n	8002fd2 <__swsetup_r+0x9a>
 8002fca:	4621      	mov	r1, r4
 8002fcc:	4630      	mov	r0, r6
 8002fce:	f000 f9ff 	bl	80033d0 <__smakebuf_r>
 8002fd2:	89a0      	ldrh	r0, [r4, #12]
 8002fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fd8:	f010 0301 	ands.w	r3, r0, #1
 8002fdc:	d00a      	beq.n	8002ff4 <__swsetup_r+0xbc>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60a3      	str	r3, [r4, #8]
 8002fe2:	6963      	ldr	r3, [r4, #20]
 8002fe4:	425b      	negs	r3, r3
 8002fe6:	61a3      	str	r3, [r4, #24]
 8002fe8:	6923      	ldr	r3, [r4, #16]
 8002fea:	b943      	cbnz	r3, 8002ffe <__swsetup_r+0xc6>
 8002fec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002ff0:	d1ba      	bne.n	8002f68 <__swsetup_r+0x30>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	0781      	lsls	r1, r0, #30
 8002ff6:	bf58      	it	pl
 8002ff8:	6963      	ldrpl	r3, [r4, #20]
 8002ffa:	60a3      	str	r3, [r4, #8]
 8002ffc:	e7f4      	b.n	8002fe8 <__swsetup_r+0xb0>
 8002ffe:	2000      	movs	r0, #0
 8003000:	e7f7      	b.n	8002ff2 <__swsetup_r+0xba>
 8003002:	bf00      	nop
 8003004:	20000018 	.word	0x20000018
 8003008:	08003e74 	.word	0x08003e74
 800300c:	08003e94 	.word	0x08003e94
 8003010:	08003e54 	.word	0x08003e54

08003014 <__sflush_r>:
 8003014:	898a      	ldrh	r2, [r1, #12]
 8003016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800301a:	4605      	mov	r5, r0
 800301c:	0710      	lsls	r0, r2, #28
 800301e:	460c      	mov	r4, r1
 8003020:	d458      	bmi.n	80030d4 <__sflush_r+0xc0>
 8003022:	684b      	ldr	r3, [r1, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	dc05      	bgt.n	8003034 <__sflush_r+0x20>
 8003028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	dc02      	bgt.n	8003034 <__sflush_r+0x20>
 800302e:	2000      	movs	r0, #0
 8003030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003036:	2e00      	cmp	r6, #0
 8003038:	d0f9      	beq.n	800302e <__sflush_r+0x1a>
 800303a:	2300      	movs	r3, #0
 800303c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003040:	682f      	ldr	r7, [r5, #0]
 8003042:	602b      	str	r3, [r5, #0]
 8003044:	d032      	beq.n	80030ac <__sflush_r+0x98>
 8003046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	075a      	lsls	r2, r3, #29
 800304c:	d505      	bpl.n	800305a <__sflush_r+0x46>
 800304e:	6863      	ldr	r3, [r4, #4]
 8003050:	1ac0      	subs	r0, r0, r3
 8003052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003054:	b10b      	cbz	r3, 800305a <__sflush_r+0x46>
 8003056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003058:	1ac0      	subs	r0, r0, r3
 800305a:	2300      	movs	r3, #0
 800305c:	4602      	mov	r2, r0
 800305e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003060:	4628      	mov	r0, r5
 8003062:	6a21      	ldr	r1, [r4, #32]
 8003064:	47b0      	blx	r6
 8003066:	1c43      	adds	r3, r0, #1
 8003068:	89a3      	ldrh	r3, [r4, #12]
 800306a:	d106      	bne.n	800307a <__sflush_r+0x66>
 800306c:	6829      	ldr	r1, [r5, #0]
 800306e:	291d      	cmp	r1, #29
 8003070:	d82c      	bhi.n	80030cc <__sflush_r+0xb8>
 8003072:	4a2a      	ldr	r2, [pc, #168]	; (800311c <__sflush_r+0x108>)
 8003074:	40ca      	lsrs	r2, r1
 8003076:	07d6      	lsls	r6, r2, #31
 8003078:	d528      	bpl.n	80030cc <__sflush_r+0xb8>
 800307a:	2200      	movs	r2, #0
 800307c:	6062      	str	r2, [r4, #4]
 800307e:	6922      	ldr	r2, [r4, #16]
 8003080:	04d9      	lsls	r1, r3, #19
 8003082:	6022      	str	r2, [r4, #0]
 8003084:	d504      	bpl.n	8003090 <__sflush_r+0x7c>
 8003086:	1c42      	adds	r2, r0, #1
 8003088:	d101      	bne.n	800308e <__sflush_r+0x7a>
 800308a:	682b      	ldr	r3, [r5, #0]
 800308c:	b903      	cbnz	r3, 8003090 <__sflush_r+0x7c>
 800308e:	6560      	str	r0, [r4, #84]	; 0x54
 8003090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003092:	602f      	str	r7, [r5, #0]
 8003094:	2900      	cmp	r1, #0
 8003096:	d0ca      	beq.n	800302e <__sflush_r+0x1a>
 8003098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800309c:	4299      	cmp	r1, r3
 800309e:	d002      	beq.n	80030a6 <__sflush_r+0x92>
 80030a0:	4628      	mov	r0, r5
 80030a2:	f000 f9d5 	bl	8003450 <_free_r>
 80030a6:	2000      	movs	r0, #0
 80030a8:	6360      	str	r0, [r4, #52]	; 0x34
 80030aa:	e7c1      	b.n	8003030 <__sflush_r+0x1c>
 80030ac:	6a21      	ldr	r1, [r4, #32]
 80030ae:	2301      	movs	r3, #1
 80030b0:	4628      	mov	r0, r5
 80030b2:	47b0      	blx	r6
 80030b4:	1c41      	adds	r1, r0, #1
 80030b6:	d1c7      	bne.n	8003048 <__sflush_r+0x34>
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0c4      	beq.n	8003048 <__sflush_r+0x34>
 80030be:	2b1d      	cmp	r3, #29
 80030c0:	d001      	beq.n	80030c6 <__sflush_r+0xb2>
 80030c2:	2b16      	cmp	r3, #22
 80030c4:	d101      	bne.n	80030ca <__sflush_r+0xb6>
 80030c6:	602f      	str	r7, [r5, #0]
 80030c8:	e7b1      	b.n	800302e <__sflush_r+0x1a>
 80030ca:	89a3      	ldrh	r3, [r4, #12]
 80030cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030d0:	81a3      	strh	r3, [r4, #12]
 80030d2:	e7ad      	b.n	8003030 <__sflush_r+0x1c>
 80030d4:	690f      	ldr	r7, [r1, #16]
 80030d6:	2f00      	cmp	r7, #0
 80030d8:	d0a9      	beq.n	800302e <__sflush_r+0x1a>
 80030da:	0793      	lsls	r3, r2, #30
 80030dc:	bf18      	it	ne
 80030de:	2300      	movne	r3, #0
 80030e0:	680e      	ldr	r6, [r1, #0]
 80030e2:	bf08      	it	eq
 80030e4:	694b      	ldreq	r3, [r1, #20]
 80030e6:	eba6 0807 	sub.w	r8, r6, r7
 80030ea:	600f      	str	r7, [r1, #0]
 80030ec:	608b      	str	r3, [r1, #8]
 80030ee:	f1b8 0f00 	cmp.w	r8, #0
 80030f2:	dd9c      	ble.n	800302e <__sflush_r+0x1a>
 80030f4:	4643      	mov	r3, r8
 80030f6:	463a      	mov	r2, r7
 80030f8:	4628      	mov	r0, r5
 80030fa:	6a21      	ldr	r1, [r4, #32]
 80030fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80030fe:	47b0      	blx	r6
 8003100:	2800      	cmp	r0, #0
 8003102:	dc06      	bgt.n	8003112 <__sflush_r+0xfe>
 8003104:	89a3      	ldrh	r3, [r4, #12]
 8003106:	f04f 30ff 	mov.w	r0, #4294967295
 800310a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800310e:	81a3      	strh	r3, [r4, #12]
 8003110:	e78e      	b.n	8003030 <__sflush_r+0x1c>
 8003112:	4407      	add	r7, r0
 8003114:	eba8 0800 	sub.w	r8, r8, r0
 8003118:	e7e9      	b.n	80030ee <__sflush_r+0xda>
 800311a:	bf00      	nop
 800311c:	20400001 	.word	0x20400001

08003120 <_fflush_r>:
 8003120:	b538      	push	{r3, r4, r5, lr}
 8003122:	690b      	ldr	r3, [r1, #16]
 8003124:	4605      	mov	r5, r0
 8003126:	460c      	mov	r4, r1
 8003128:	b913      	cbnz	r3, 8003130 <_fflush_r+0x10>
 800312a:	2500      	movs	r5, #0
 800312c:	4628      	mov	r0, r5
 800312e:	bd38      	pop	{r3, r4, r5, pc}
 8003130:	b118      	cbz	r0, 800313a <_fflush_r+0x1a>
 8003132:	6983      	ldr	r3, [r0, #24]
 8003134:	b90b      	cbnz	r3, 800313a <_fflush_r+0x1a>
 8003136:	f000 f887 	bl	8003248 <__sinit>
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <_fflush_r+0x6c>)
 800313c:	429c      	cmp	r4, r3
 800313e:	d11b      	bne.n	8003178 <_fflush_r+0x58>
 8003140:	686c      	ldr	r4, [r5, #4]
 8003142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ef      	beq.n	800312a <_fflush_r+0xa>
 800314a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800314c:	07d0      	lsls	r0, r2, #31
 800314e:	d404      	bmi.n	800315a <_fflush_r+0x3a>
 8003150:	0599      	lsls	r1, r3, #22
 8003152:	d402      	bmi.n	800315a <_fflush_r+0x3a>
 8003154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003156:	f000 f915 	bl	8003384 <__retarget_lock_acquire_recursive>
 800315a:	4628      	mov	r0, r5
 800315c:	4621      	mov	r1, r4
 800315e:	f7ff ff59 	bl	8003014 <__sflush_r>
 8003162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003164:	4605      	mov	r5, r0
 8003166:	07da      	lsls	r2, r3, #31
 8003168:	d4e0      	bmi.n	800312c <_fflush_r+0xc>
 800316a:	89a3      	ldrh	r3, [r4, #12]
 800316c:	059b      	lsls	r3, r3, #22
 800316e:	d4dd      	bmi.n	800312c <_fflush_r+0xc>
 8003170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003172:	f000 f908 	bl	8003386 <__retarget_lock_release_recursive>
 8003176:	e7d9      	b.n	800312c <_fflush_r+0xc>
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <_fflush_r+0x70>)
 800317a:	429c      	cmp	r4, r3
 800317c:	d101      	bne.n	8003182 <_fflush_r+0x62>
 800317e:	68ac      	ldr	r4, [r5, #8]
 8003180:	e7df      	b.n	8003142 <_fflush_r+0x22>
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <_fflush_r+0x74>)
 8003184:	429c      	cmp	r4, r3
 8003186:	bf08      	it	eq
 8003188:	68ec      	ldreq	r4, [r5, #12]
 800318a:	e7da      	b.n	8003142 <_fflush_r+0x22>
 800318c:	08003e74 	.word	0x08003e74
 8003190:	08003e94 	.word	0x08003e94
 8003194:	08003e54 	.word	0x08003e54

08003198 <std>:
 8003198:	2300      	movs	r3, #0
 800319a:	b510      	push	{r4, lr}
 800319c:	4604      	mov	r4, r0
 800319e:	e9c0 3300 	strd	r3, r3, [r0]
 80031a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031a6:	6083      	str	r3, [r0, #8]
 80031a8:	8181      	strh	r1, [r0, #12]
 80031aa:	6643      	str	r3, [r0, #100]	; 0x64
 80031ac:	81c2      	strh	r2, [r0, #14]
 80031ae:	6183      	str	r3, [r0, #24]
 80031b0:	4619      	mov	r1, r3
 80031b2:	2208      	movs	r2, #8
 80031b4:	305c      	adds	r0, #92	; 0x5c
 80031b6:	f7ff fdd7 	bl	8002d68 <memset>
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <std+0x38>)
 80031bc:	6224      	str	r4, [r4, #32]
 80031be:	6263      	str	r3, [r4, #36]	; 0x24
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <std+0x3c>)
 80031c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80031c4:	4b04      	ldr	r3, [pc, #16]	; (80031d8 <std+0x40>)
 80031c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <std+0x44>)
 80031ca:	6323      	str	r3, [r4, #48]	; 0x30
 80031cc:	bd10      	pop	{r4, pc}
 80031ce:	bf00      	nop
 80031d0:	08003b99 	.word	0x08003b99
 80031d4:	08003bbb 	.word	0x08003bbb
 80031d8:	08003bf3 	.word	0x08003bf3
 80031dc:	08003c17 	.word	0x08003c17

080031e0 <_cleanup_r>:
 80031e0:	4901      	ldr	r1, [pc, #4]	; (80031e8 <_cleanup_r+0x8>)
 80031e2:	f000 b8af 	b.w	8003344 <_fwalk_reent>
 80031e6:	bf00      	nop
 80031e8:	08003121 	.word	0x08003121

080031ec <__sfmoreglue>:
 80031ec:	b570      	push	{r4, r5, r6, lr}
 80031ee:	2568      	movs	r5, #104	; 0x68
 80031f0:	1e4a      	subs	r2, r1, #1
 80031f2:	4355      	muls	r5, r2
 80031f4:	460e      	mov	r6, r1
 80031f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80031fa:	f000 f975 	bl	80034e8 <_malloc_r>
 80031fe:	4604      	mov	r4, r0
 8003200:	b140      	cbz	r0, 8003214 <__sfmoreglue+0x28>
 8003202:	2100      	movs	r1, #0
 8003204:	e9c0 1600 	strd	r1, r6, [r0]
 8003208:	300c      	adds	r0, #12
 800320a:	60a0      	str	r0, [r4, #8]
 800320c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003210:	f7ff fdaa 	bl	8002d68 <memset>
 8003214:	4620      	mov	r0, r4
 8003216:	bd70      	pop	{r4, r5, r6, pc}

08003218 <__sfp_lock_acquire>:
 8003218:	4801      	ldr	r0, [pc, #4]	; (8003220 <__sfp_lock_acquire+0x8>)
 800321a:	f000 b8b3 	b.w	8003384 <__retarget_lock_acquire_recursive>
 800321e:	bf00      	nop
 8003220:	200001f0 	.word	0x200001f0

08003224 <__sfp_lock_release>:
 8003224:	4801      	ldr	r0, [pc, #4]	; (800322c <__sfp_lock_release+0x8>)
 8003226:	f000 b8ae 	b.w	8003386 <__retarget_lock_release_recursive>
 800322a:	bf00      	nop
 800322c:	200001f0 	.word	0x200001f0

08003230 <__sinit_lock_acquire>:
 8003230:	4801      	ldr	r0, [pc, #4]	; (8003238 <__sinit_lock_acquire+0x8>)
 8003232:	f000 b8a7 	b.w	8003384 <__retarget_lock_acquire_recursive>
 8003236:	bf00      	nop
 8003238:	200001eb 	.word	0x200001eb

0800323c <__sinit_lock_release>:
 800323c:	4801      	ldr	r0, [pc, #4]	; (8003244 <__sinit_lock_release+0x8>)
 800323e:	f000 b8a2 	b.w	8003386 <__retarget_lock_release_recursive>
 8003242:	bf00      	nop
 8003244:	200001eb 	.word	0x200001eb

08003248 <__sinit>:
 8003248:	b510      	push	{r4, lr}
 800324a:	4604      	mov	r4, r0
 800324c:	f7ff fff0 	bl	8003230 <__sinit_lock_acquire>
 8003250:	69a3      	ldr	r3, [r4, #24]
 8003252:	b11b      	cbz	r3, 800325c <__sinit+0x14>
 8003254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003258:	f7ff bff0 	b.w	800323c <__sinit_lock_release>
 800325c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003260:	6523      	str	r3, [r4, #80]	; 0x50
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <__sinit+0x68>)
 8003264:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <__sinit+0x6c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	62a2      	str	r2, [r4, #40]	; 0x28
 800326a:	42a3      	cmp	r3, r4
 800326c:	bf08      	it	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	4620      	mov	r0, r4
 8003272:	bf08      	it	eq
 8003274:	61a3      	streq	r3, [r4, #24]
 8003276:	f000 f81f 	bl	80032b8 <__sfp>
 800327a:	6060      	str	r0, [r4, #4]
 800327c:	4620      	mov	r0, r4
 800327e:	f000 f81b 	bl	80032b8 <__sfp>
 8003282:	60a0      	str	r0, [r4, #8]
 8003284:	4620      	mov	r0, r4
 8003286:	f000 f817 	bl	80032b8 <__sfp>
 800328a:	2200      	movs	r2, #0
 800328c:	2104      	movs	r1, #4
 800328e:	60e0      	str	r0, [r4, #12]
 8003290:	6860      	ldr	r0, [r4, #4]
 8003292:	f7ff ff81 	bl	8003198 <std>
 8003296:	2201      	movs	r2, #1
 8003298:	2109      	movs	r1, #9
 800329a:	68a0      	ldr	r0, [r4, #8]
 800329c:	f7ff ff7c 	bl	8003198 <std>
 80032a0:	2202      	movs	r2, #2
 80032a2:	2112      	movs	r1, #18
 80032a4:	68e0      	ldr	r0, [r4, #12]
 80032a6:	f7ff ff77 	bl	8003198 <std>
 80032aa:	2301      	movs	r3, #1
 80032ac:	61a3      	str	r3, [r4, #24]
 80032ae:	e7d1      	b.n	8003254 <__sinit+0xc>
 80032b0:	08003e50 	.word	0x08003e50
 80032b4:	080031e1 	.word	0x080031e1

080032b8 <__sfp>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	4607      	mov	r7, r0
 80032bc:	f7ff ffac 	bl	8003218 <__sfp_lock_acquire>
 80032c0:	4b1e      	ldr	r3, [pc, #120]	; (800333c <__sfp+0x84>)
 80032c2:	681e      	ldr	r6, [r3, #0]
 80032c4:	69b3      	ldr	r3, [r6, #24]
 80032c6:	b913      	cbnz	r3, 80032ce <__sfp+0x16>
 80032c8:	4630      	mov	r0, r6
 80032ca:	f7ff ffbd 	bl	8003248 <__sinit>
 80032ce:	3648      	adds	r6, #72	; 0x48
 80032d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80032d4:	3b01      	subs	r3, #1
 80032d6:	d503      	bpl.n	80032e0 <__sfp+0x28>
 80032d8:	6833      	ldr	r3, [r6, #0]
 80032da:	b30b      	cbz	r3, 8003320 <__sfp+0x68>
 80032dc:	6836      	ldr	r6, [r6, #0]
 80032de:	e7f7      	b.n	80032d0 <__sfp+0x18>
 80032e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80032e4:	b9d5      	cbnz	r5, 800331c <__sfp+0x64>
 80032e6:	4b16      	ldr	r3, [pc, #88]	; (8003340 <__sfp+0x88>)
 80032e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80032ec:	60e3      	str	r3, [r4, #12]
 80032ee:	6665      	str	r5, [r4, #100]	; 0x64
 80032f0:	f000 f847 	bl	8003382 <__retarget_lock_init_recursive>
 80032f4:	f7ff ff96 	bl	8003224 <__sfp_lock_release>
 80032f8:	2208      	movs	r2, #8
 80032fa:	4629      	mov	r1, r5
 80032fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003300:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003304:	6025      	str	r5, [r4, #0]
 8003306:	61a5      	str	r5, [r4, #24]
 8003308:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800330c:	f7ff fd2c 	bl	8002d68 <memset>
 8003310:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003314:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003318:	4620      	mov	r0, r4
 800331a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800331c:	3468      	adds	r4, #104	; 0x68
 800331e:	e7d9      	b.n	80032d4 <__sfp+0x1c>
 8003320:	2104      	movs	r1, #4
 8003322:	4638      	mov	r0, r7
 8003324:	f7ff ff62 	bl	80031ec <__sfmoreglue>
 8003328:	4604      	mov	r4, r0
 800332a:	6030      	str	r0, [r6, #0]
 800332c:	2800      	cmp	r0, #0
 800332e:	d1d5      	bne.n	80032dc <__sfp+0x24>
 8003330:	f7ff ff78 	bl	8003224 <__sfp_lock_release>
 8003334:	230c      	movs	r3, #12
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	e7ee      	b.n	8003318 <__sfp+0x60>
 800333a:	bf00      	nop
 800333c:	08003e50 	.word	0x08003e50
 8003340:	ffff0001 	.word	0xffff0001

08003344 <_fwalk_reent>:
 8003344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003348:	4606      	mov	r6, r0
 800334a:	4688      	mov	r8, r1
 800334c:	2700      	movs	r7, #0
 800334e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003352:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003356:	f1b9 0901 	subs.w	r9, r9, #1
 800335a:	d505      	bpl.n	8003368 <_fwalk_reent+0x24>
 800335c:	6824      	ldr	r4, [r4, #0]
 800335e:	2c00      	cmp	r4, #0
 8003360:	d1f7      	bne.n	8003352 <_fwalk_reent+0xe>
 8003362:	4638      	mov	r0, r7
 8003364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003368:	89ab      	ldrh	r3, [r5, #12]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d907      	bls.n	800337e <_fwalk_reent+0x3a>
 800336e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003372:	3301      	adds	r3, #1
 8003374:	d003      	beq.n	800337e <_fwalk_reent+0x3a>
 8003376:	4629      	mov	r1, r5
 8003378:	4630      	mov	r0, r6
 800337a:	47c0      	blx	r8
 800337c:	4307      	orrs	r7, r0
 800337e:	3568      	adds	r5, #104	; 0x68
 8003380:	e7e9      	b.n	8003356 <_fwalk_reent+0x12>

08003382 <__retarget_lock_init_recursive>:
 8003382:	4770      	bx	lr

08003384 <__retarget_lock_acquire_recursive>:
 8003384:	4770      	bx	lr

08003386 <__retarget_lock_release_recursive>:
 8003386:	4770      	bx	lr

08003388 <__swhatbuf_r>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	460e      	mov	r6, r1
 800338c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003390:	4614      	mov	r4, r2
 8003392:	2900      	cmp	r1, #0
 8003394:	461d      	mov	r5, r3
 8003396:	b096      	sub	sp, #88	; 0x58
 8003398:	da07      	bge.n	80033aa <__swhatbuf_r+0x22>
 800339a:	2300      	movs	r3, #0
 800339c:	602b      	str	r3, [r5, #0]
 800339e:	89b3      	ldrh	r3, [r6, #12]
 80033a0:	061a      	lsls	r2, r3, #24
 80033a2:	d410      	bmi.n	80033c6 <__swhatbuf_r+0x3e>
 80033a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033a8:	e00e      	b.n	80033c8 <__swhatbuf_r+0x40>
 80033aa:	466a      	mov	r2, sp
 80033ac:	f000 fc5a 	bl	8003c64 <_fstat_r>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	dbf2      	blt.n	800339a <__swhatbuf_r+0x12>
 80033b4:	9a01      	ldr	r2, [sp, #4]
 80033b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033be:	425a      	negs	r2, r3
 80033c0:	415a      	adcs	r2, r3
 80033c2:	602a      	str	r2, [r5, #0]
 80033c4:	e7ee      	b.n	80033a4 <__swhatbuf_r+0x1c>
 80033c6:	2340      	movs	r3, #64	; 0x40
 80033c8:	2000      	movs	r0, #0
 80033ca:	6023      	str	r3, [r4, #0]
 80033cc:	b016      	add	sp, #88	; 0x58
 80033ce:	bd70      	pop	{r4, r5, r6, pc}

080033d0 <__smakebuf_r>:
 80033d0:	898b      	ldrh	r3, [r1, #12]
 80033d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033d4:	079d      	lsls	r5, r3, #30
 80033d6:	4606      	mov	r6, r0
 80033d8:	460c      	mov	r4, r1
 80033da:	d507      	bpl.n	80033ec <__smakebuf_r+0x1c>
 80033dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033e0:	6023      	str	r3, [r4, #0]
 80033e2:	6123      	str	r3, [r4, #16]
 80033e4:	2301      	movs	r3, #1
 80033e6:	6163      	str	r3, [r4, #20]
 80033e8:	b002      	add	sp, #8
 80033ea:	bd70      	pop	{r4, r5, r6, pc}
 80033ec:	466a      	mov	r2, sp
 80033ee:	ab01      	add	r3, sp, #4
 80033f0:	f7ff ffca 	bl	8003388 <__swhatbuf_r>
 80033f4:	9900      	ldr	r1, [sp, #0]
 80033f6:	4605      	mov	r5, r0
 80033f8:	4630      	mov	r0, r6
 80033fa:	f000 f875 	bl	80034e8 <_malloc_r>
 80033fe:	b948      	cbnz	r0, 8003414 <__smakebuf_r+0x44>
 8003400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003404:	059a      	lsls	r2, r3, #22
 8003406:	d4ef      	bmi.n	80033e8 <__smakebuf_r+0x18>
 8003408:	f023 0303 	bic.w	r3, r3, #3
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	81a3      	strh	r3, [r4, #12]
 8003412:	e7e3      	b.n	80033dc <__smakebuf_r+0xc>
 8003414:	4b0d      	ldr	r3, [pc, #52]	; (800344c <__smakebuf_r+0x7c>)
 8003416:	62b3      	str	r3, [r6, #40]	; 0x28
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	6020      	str	r0, [r4, #0]
 800341c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003420:	81a3      	strh	r3, [r4, #12]
 8003422:	9b00      	ldr	r3, [sp, #0]
 8003424:	6120      	str	r0, [r4, #16]
 8003426:	6163      	str	r3, [r4, #20]
 8003428:	9b01      	ldr	r3, [sp, #4]
 800342a:	b15b      	cbz	r3, 8003444 <__smakebuf_r+0x74>
 800342c:	4630      	mov	r0, r6
 800342e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003432:	f000 fc29 	bl	8003c88 <_isatty_r>
 8003436:	b128      	cbz	r0, 8003444 <__smakebuf_r+0x74>
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	f023 0303 	bic.w	r3, r3, #3
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	81a3      	strh	r3, [r4, #12]
 8003444:	89a0      	ldrh	r0, [r4, #12]
 8003446:	4305      	orrs	r5, r0
 8003448:	81a5      	strh	r5, [r4, #12]
 800344a:	e7cd      	b.n	80033e8 <__smakebuf_r+0x18>
 800344c:	080031e1 	.word	0x080031e1

08003450 <_free_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	4605      	mov	r5, r0
 8003454:	2900      	cmp	r1, #0
 8003456:	d043      	beq.n	80034e0 <_free_r+0x90>
 8003458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800345c:	1f0c      	subs	r4, r1, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	bfb8      	it	lt
 8003462:	18e4      	addlt	r4, r4, r3
 8003464:	f000 fc40 	bl	8003ce8 <__malloc_lock>
 8003468:	4a1e      	ldr	r2, [pc, #120]	; (80034e4 <_free_r+0x94>)
 800346a:	6813      	ldr	r3, [r2, #0]
 800346c:	4610      	mov	r0, r2
 800346e:	b933      	cbnz	r3, 800347e <_free_r+0x2e>
 8003470:	6063      	str	r3, [r4, #4]
 8003472:	6014      	str	r4, [r2, #0]
 8003474:	4628      	mov	r0, r5
 8003476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800347a:	f000 bc3b 	b.w	8003cf4 <__malloc_unlock>
 800347e:	42a3      	cmp	r3, r4
 8003480:	d90a      	bls.n	8003498 <_free_r+0x48>
 8003482:	6821      	ldr	r1, [r4, #0]
 8003484:	1862      	adds	r2, r4, r1
 8003486:	4293      	cmp	r3, r2
 8003488:	bf01      	itttt	eq
 800348a:	681a      	ldreq	r2, [r3, #0]
 800348c:	685b      	ldreq	r3, [r3, #4]
 800348e:	1852      	addeq	r2, r2, r1
 8003490:	6022      	streq	r2, [r4, #0]
 8003492:	6063      	str	r3, [r4, #4]
 8003494:	6004      	str	r4, [r0, #0]
 8003496:	e7ed      	b.n	8003474 <_free_r+0x24>
 8003498:	461a      	mov	r2, r3
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	b10b      	cbz	r3, 80034a2 <_free_r+0x52>
 800349e:	42a3      	cmp	r3, r4
 80034a0:	d9fa      	bls.n	8003498 <_free_r+0x48>
 80034a2:	6811      	ldr	r1, [r2, #0]
 80034a4:	1850      	adds	r0, r2, r1
 80034a6:	42a0      	cmp	r0, r4
 80034a8:	d10b      	bne.n	80034c2 <_free_r+0x72>
 80034aa:	6820      	ldr	r0, [r4, #0]
 80034ac:	4401      	add	r1, r0
 80034ae:	1850      	adds	r0, r2, r1
 80034b0:	4283      	cmp	r3, r0
 80034b2:	6011      	str	r1, [r2, #0]
 80034b4:	d1de      	bne.n	8003474 <_free_r+0x24>
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4401      	add	r1, r0
 80034bc:	6011      	str	r1, [r2, #0]
 80034be:	6053      	str	r3, [r2, #4]
 80034c0:	e7d8      	b.n	8003474 <_free_r+0x24>
 80034c2:	d902      	bls.n	80034ca <_free_r+0x7a>
 80034c4:	230c      	movs	r3, #12
 80034c6:	602b      	str	r3, [r5, #0]
 80034c8:	e7d4      	b.n	8003474 <_free_r+0x24>
 80034ca:	6820      	ldr	r0, [r4, #0]
 80034cc:	1821      	adds	r1, r4, r0
 80034ce:	428b      	cmp	r3, r1
 80034d0:	bf01      	itttt	eq
 80034d2:	6819      	ldreq	r1, [r3, #0]
 80034d4:	685b      	ldreq	r3, [r3, #4]
 80034d6:	1809      	addeq	r1, r1, r0
 80034d8:	6021      	streq	r1, [r4, #0]
 80034da:	6063      	str	r3, [r4, #4]
 80034dc:	6054      	str	r4, [r2, #4]
 80034de:	e7c9      	b.n	8003474 <_free_r+0x24>
 80034e0:	bd38      	pop	{r3, r4, r5, pc}
 80034e2:	bf00      	nop
 80034e4:	20000144 	.word	0x20000144

080034e8 <_malloc_r>:
 80034e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ea:	1ccd      	adds	r5, r1, #3
 80034ec:	f025 0503 	bic.w	r5, r5, #3
 80034f0:	3508      	adds	r5, #8
 80034f2:	2d0c      	cmp	r5, #12
 80034f4:	bf38      	it	cc
 80034f6:	250c      	movcc	r5, #12
 80034f8:	2d00      	cmp	r5, #0
 80034fa:	4606      	mov	r6, r0
 80034fc:	db01      	blt.n	8003502 <_malloc_r+0x1a>
 80034fe:	42a9      	cmp	r1, r5
 8003500:	d903      	bls.n	800350a <_malloc_r+0x22>
 8003502:	230c      	movs	r3, #12
 8003504:	6033      	str	r3, [r6, #0]
 8003506:	2000      	movs	r0, #0
 8003508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800350a:	f000 fbed 	bl	8003ce8 <__malloc_lock>
 800350e:	4921      	ldr	r1, [pc, #132]	; (8003594 <_malloc_r+0xac>)
 8003510:	680a      	ldr	r2, [r1, #0]
 8003512:	4614      	mov	r4, r2
 8003514:	b99c      	cbnz	r4, 800353e <_malloc_r+0x56>
 8003516:	4f20      	ldr	r7, [pc, #128]	; (8003598 <_malloc_r+0xb0>)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	b923      	cbnz	r3, 8003526 <_malloc_r+0x3e>
 800351c:	4621      	mov	r1, r4
 800351e:	4630      	mov	r0, r6
 8003520:	f000 fb2a 	bl	8003b78 <_sbrk_r>
 8003524:	6038      	str	r0, [r7, #0]
 8003526:	4629      	mov	r1, r5
 8003528:	4630      	mov	r0, r6
 800352a:	f000 fb25 	bl	8003b78 <_sbrk_r>
 800352e:	1c43      	adds	r3, r0, #1
 8003530:	d123      	bne.n	800357a <_malloc_r+0x92>
 8003532:	230c      	movs	r3, #12
 8003534:	4630      	mov	r0, r6
 8003536:	6033      	str	r3, [r6, #0]
 8003538:	f000 fbdc 	bl	8003cf4 <__malloc_unlock>
 800353c:	e7e3      	b.n	8003506 <_malloc_r+0x1e>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	1b5b      	subs	r3, r3, r5
 8003542:	d417      	bmi.n	8003574 <_malloc_r+0x8c>
 8003544:	2b0b      	cmp	r3, #11
 8003546:	d903      	bls.n	8003550 <_malloc_r+0x68>
 8003548:	6023      	str	r3, [r4, #0]
 800354a:	441c      	add	r4, r3
 800354c:	6025      	str	r5, [r4, #0]
 800354e:	e004      	b.n	800355a <_malloc_r+0x72>
 8003550:	6863      	ldr	r3, [r4, #4]
 8003552:	42a2      	cmp	r2, r4
 8003554:	bf0c      	ite	eq
 8003556:	600b      	streq	r3, [r1, #0]
 8003558:	6053      	strne	r3, [r2, #4]
 800355a:	4630      	mov	r0, r6
 800355c:	f000 fbca 	bl	8003cf4 <__malloc_unlock>
 8003560:	f104 000b 	add.w	r0, r4, #11
 8003564:	1d23      	adds	r3, r4, #4
 8003566:	f020 0007 	bic.w	r0, r0, #7
 800356a:	1ac2      	subs	r2, r0, r3
 800356c:	d0cc      	beq.n	8003508 <_malloc_r+0x20>
 800356e:	1a1b      	subs	r3, r3, r0
 8003570:	50a3      	str	r3, [r4, r2]
 8003572:	e7c9      	b.n	8003508 <_malloc_r+0x20>
 8003574:	4622      	mov	r2, r4
 8003576:	6864      	ldr	r4, [r4, #4]
 8003578:	e7cc      	b.n	8003514 <_malloc_r+0x2c>
 800357a:	1cc4      	adds	r4, r0, #3
 800357c:	f024 0403 	bic.w	r4, r4, #3
 8003580:	42a0      	cmp	r0, r4
 8003582:	d0e3      	beq.n	800354c <_malloc_r+0x64>
 8003584:	1a21      	subs	r1, r4, r0
 8003586:	4630      	mov	r0, r6
 8003588:	f000 faf6 	bl	8003b78 <_sbrk_r>
 800358c:	3001      	adds	r0, #1
 800358e:	d1dd      	bne.n	800354c <_malloc_r+0x64>
 8003590:	e7cf      	b.n	8003532 <_malloc_r+0x4a>
 8003592:	bf00      	nop
 8003594:	20000144 	.word	0x20000144
 8003598:	20000148 	.word	0x20000148

0800359c <__sfputc_r>:
 800359c:	6893      	ldr	r3, [r2, #8]
 800359e:	b410      	push	{r4}
 80035a0:	3b01      	subs	r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	6093      	str	r3, [r2, #8]
 80035a6:	da07      	bge.n	80035b8 <__sfputc_r+0x1c>
 80035a8:	6994      	ldr	r4, [r2, #24]
 80035aa:	42a3      	cmp	r3, r4
 80035ac:	db01      	blt.n	80035b2 <__sfputc_r+0x16>
 80035ae:	290a      	cmp	r1, #10
 80035b0:	d102      	bne.n	80035b8 <__sfputc_r+0x1c>
 80035b2:	bc10      	pop	{r4}
 80035b4:	f7ff bc6e 	b.w	8002e94 <__swbuf_r>
 80035b8:	6813      	ldr	r3, [r2, #0]
 80035ba:	1c58      	adds	r0, r3, #1
 80035bc:	6010      	str	r0, [r2, #0]
 80035be:	7019      	strb	r1, [r3, #0]
 80035c0:	4608      	mov	r0, r1
 80035c2:	bc10      	pop	{r4}
 80035c4:	4770      	bx	lr

080035c6 <__sfputs_r>:
 80035c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c8:	4606      	mov	r6, r0
 80035ca:	460f      	mov	r7, r1
 80035cc:	4614      	mov	r4, r2
 80035ce:	18d5      	adds	r5, r2, r3
 80035d0:	42ac      	cmp	r4, r5
 80035d2:	d101      	bne.n	80035d8 <__sfputs_r+0x12>
 80035d4:	2000      	movs	r0, #0
 80035d6:	e007      	b.n	80035e8 <__sfputs_r+0x22>
 80035d8:	463a      	mov	r2, r7
 80035da:	4630      	mov	r0, r6
 80035dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035e0:	f7ff ffdc 	bl	800359c <__sfputc_r>
 80035e4:	1c43      	adds	r3, r0, #1
 80035e6:	d1f3      	bne.n	80035d0 <__sfputs_r+0xa>
 80035e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035ec <_vfiprintf_r>:
 80035ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f0:	460d      	mov	r5, r1
 80035f2:	4614      	mov	r4, r2
 80035f4:	4698      	mov	r8, r3
 80035f6:	4606      	mov	r6, r0
 80035f8:	b09d      	sub	sp, #116	; 0x74
 80035fa:	b118      	cbz	r0, 8003604 <_vfiprintf_r+0x18>
 80035fc:	6983      	ldr	r3, [r0, #24]
 80035fe:	b90b      	cbnz	r3, 8003604 <_vfiprintf_r+0x18>
 8003600:	f7ff fe22 	bl	8003248 <__sinit>
 8003604:	4b89      	ldr	r3, [pc, #548]	; (800382c <_vfiprintf_r+0x240>)
 8003606:	429d      	cmp	r5, r3
 8003608:	d11b      	bne.n	8003642 <_vfiprintf_r+0x56>
 800360a:	6875      	ldr	r5, [r6, #4]
 800360c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800360e:	07d9      	lsls	r1, r3, #31
 8003610:	d405      	bmi.n	800361e <_vfiprintf_r+0x32>
 8003612:	89ab      	ldrh	r3, [r5, #12]
 8003614:	059a      	lsls	r2, r3, #22
 8003616:	d402      	bmi.n	800361e <_vfiprintf_r+0x32>
 8003618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800361a:	f7ff feb3 	bl	8003384 <__retarget_lock_acquire_recursive>
 800361e:	89ab      	ldrh	r3, [r5, #12]
 8003620:	071b      	lsls	r3, r3, #28
 8003622:	d501      	bpl.n	8003628 <_vfiprintf_r+0x3c>
 8003624:	692b      	ldr	r3, [r5, #16]
 8003626:	b9eb      	cbnz	r3, 8003664 <_vfiprintf_r+0x78>
 8003628:	4629      	mov	r1, r5
 800362a:	4630      	mov	r0, r6
 800362c:	f7ff fc84 	bl	8002f38 <__swsetup_r>
 8003630:	b1c0      	cbz	r0, 8003664 <_vfiprintf_r+0x78>
 8003632:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003634:	07dc      	lsls	r4, r3, #31
 8003636:	d50e      	bpl.n	8003656 <_vfiprintf_r+0x6a>
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	b01d      	add	sp, #116	; 0x74
 800363e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003642:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <_vfiprintf_r+0x244>)
 8003644:	429d      	cmp	r5, r3
 8003646:	d101      	bne.n	800364c <_vfiprintf_r+0x60>
 8003648:	68b5      	ldr	r5, [r6, #8]
 800364a:	e7df      	b.n	800360c <_vfiprintf_r+0x20>
 800364c:	4b79      	ldr	r3, [pc, #484]	; (8003834 <_vfiprintf_r+0x248>)
 800364e:	429d      	cmp	r5, r3
 8003650:	bf08      	it	eq
 8003652:	68f5      	ldreq	r5, [r6, #12]
 8003654:	e7da      	b.n	800360c <_vfiprintf_r+0x20>
 8003656:	89ab      	ldrh	r3, [r5, #12]
 8003658:	0598      	lsls	r0, r3, #22
 800365a:	d4ed      	bmi.n	8003638 <_vfiprintf_r+0x4c>
 800365c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800365e:	f7ff fe92 	bl	8003386 <__retarget_lock_release_recursive>
 8003662:	e7e9      	b.n	8003638 <_vfiprintf_r+0x4c>
 8003664:	2300      	movs	r3, #0
 8003666:	9309      	str	r3, [sp, #36]	; 0x24
 8003668:	2320      	movs	r3, #32
 800366a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800366e:	2330      	movs	r3, #48	; 0x30
 8003670:	f04f 0901 	mov.w	r9, #1
 8003674:	f8cd 800c 	str.w	r8, [sp, #12]
 8003678:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003838 <_vfiprintf_r+0x24c>
 800367c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003680:	4623      	mov	r3, r4
 8003682:	469a      	mov	sl, r3
 8003684:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003688:	b10a      	cbz	r2, 800368e <_vfiprintf_r+0xa2>
 800368a:	2a25      	cmp	r2, #37	; 0x25
 800368c:	d1f9      	bne.n	8003682 <_vfiprintf_r+0x96>
 800368e:	ebba 0b04 	subs.w	fp, sl, r4
 8003692:	d00b      	beq.n	80036ac <_vfiprintf_r+0xc0>
 8003694:	465b      	mov	r3, fp
 8003696:	4622      	mov	r2, r4
 8003698:	4629      	mov	r1, r5
 800369a:	4630      	mov	r0, r6
 800369c:	f7ff ff93 	bl	80035c6 <__sfputs_r>
 80036a0:	3001      	adds	r0, #1
 80036a2:	f000 80aa 	beq.w	80037fa <_vfiprintf_r+0x20e>
 80036a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036a8:	445a      	add	r2, fp
 80036aa:	9209      	str	r2, [sp, #36]	; 0x24
 80036ac:	f89a 3000 	ldrb.w	r3, [sl]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80a2 	beq.w	80037fa <_vfiprintf_r+0x20e>
 80036b6:	2300      	movs	r3, #0
 80036b8:	f04f 32ff 	mov.w	r2, #4294967295
 80036bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036c0:	f10a 0a01 	add.w	sl, sl, #1
 80036c4:	9304      	str	r3, [sp, #16]
 80036c6:	9307      	str	r3, [sp, #28]
 80036c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036cc:	931a      	str	r3, [sp, #104]	; 0x68
 80036ce:	4654      	mov	r4, sl
 80036d0:	2205      	movs	r2, #5
 80036d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d6:	4858      	ldr	r0, [pc, #352]	; (8003838 <_vfiprintf_r+0x24c>)
 80036d8:	f000 faf8 	bl	8003ccc <memchr>
 80036dc:	9a04      	ldr	r2, [sp, #16]
 80036de:	b9d8      	cbnz	r0, 8003718 <_vfiprintf_r+0x12c>
 80036e0:	06d1      	lsls	r1, r2, #27
 80036e2:	bf44      	itt	mi
 80036e4:	2320      	movmi	r3, #32
 80036e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036ea:	0713      	lsls	r3, r2, #28
 80036ec:	bf44      	itt	mi
 80036ee:	232b      	movmi	r3, #43	; 0x2b
 80036f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036f4:	f89a 3000 	ldrb.w	r3, [sl]
 80036f8:	2b2a      	cmp	r3, #42	; 0x2a
 80036fa:	d015      	beq.n	8003728 <_vfiprintf_r+0x13c>
 80036fc:	4654      	mov	r4, sl
 80036fe:	2000      	movs	r0, #0
 8003700:	f04f 0c0a 	mov.w	ip, #10
 8003704:	9a07      	ldr	r2, [sp, #28]
 8003706:	4621      	mov	r1, r4
 8003708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800370c:	3b30      	subs	r3, #48	; 0x30
 800370e:	2b09      	cmp	r3, #9
 8003710:	d94e      	bls.n	80037b0 <_vfiprintf_r+0x1c4>
 8003712:	b1b0      	cbz	r0, 8003742 <_vfiprintf_r+0x156>
 8003714:	9207      	str	r2, [sp, #28]
 8003716:	e014      	b.n	8003742 <_vfiprintf_r+0x156>
 8003718:	eba0 0308 	sub.w	r3, r0, r8
 800371c:	fa09 f303 	lsl.w	r3, r9, r3
 8003720:	4313      	orrs	r3, r2
 8003722:	46a2      	mov	sl, r4
 8003724:	9304      	str	r3, [sp, #16]
 8003726:	e7d2      	b.n	80036ce <_vfiprintf_r+0xe2>
 8003728:	9b03      	ldr	r3, [sp, #12]
 800372a:	1d19      	adds	r1, r3, #4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	9103      	str	r1, [sp, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	bfbb      	ittet	lt
 8003734:	425b      	neglt	r3, r3
 8003736:	f042 0202 	orrlt.w	r2, r2, #2
 800373a:	9307      	strge	r3, [sp, #28]
 800373c:	9307      	strlt	r3, [sp, #28]
 800373e:	bfb8      	it	lt
 8003740:	9204      	strlt	r2, [sp, #16]
 8003742:	7823      	ldrb	r3, [r4, #0]
 8003744:	2b2e      	cmp	r3, #46	; 0x2e
 8003746:	d10c      	bne.n	8003762 <_vfiprintf_r+0x176>
 8003748:	7863      	ldrb	r3, [r4, #1]
 800374a:	2b2a      	cmp	r3, #42	; 0x2a
 800374c:	d135      	bne.n	80037ba <_vfiprintf_r+0x1ce>
 800374e:	9b03      	ldr	r3, [sp, #12]
 8003750:	3402      	adds	r4, #2
 8003752:	1d1a      	adds	r2, r3, #4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	9203      	str	r2, [sp, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	bfb8      	it	lt
 800375c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003760:	9305      	str	r3, [sp, #20]
 8003762:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003848 <_vfiprintf_r+0x25c>
 8003766:	2203      	movs	r2, #3
 8003768:	4650      	mov	r0, sl
 800376a:	7821      	ldrb	r1, [r4, #0]
 800376c:	f000 faae 	bl	8003ccc <memchr>
 8003770:	b140      	cbz	r0, 8003784 <_vfiprintf_r+0x198>
 8003772:	2340      	movs	r3, #64	; 0x40
 8003774:	eba0 000a 	sub.w	r0, r0, sl
 8003778:	fa03 f000 	lsl.w	r0, r3, r0
 800377c:	9b04      	ldr	r3, [sp, #16]
 800377e:	3401      	adds	r4, #1
 8003780:	4303      	orrs	r3, r0
 8003782:	9304      	str	r3, [sp, #16]
 8003784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003788:	2206      	movs	r2, #6
 800378a:	482c      	ldr	r0, [pc, #176]	; (800383c <_vfiprintf_r+0x250>)
 800378c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003790:	f000 fa9c 	bl	8003ccc <memchr>
 8003794:	2800      	cmp	r0, #0
 8003796:	d03f      	beq.n	8003818 <_vfiprintf_r+0x22c>
 8003798:	4b29      	ldr	r3, [pc, #164]	; (8003840 <_vfiprintf_r+0x254>)
 800379a:	bb1b      	cbnz	r3, 80037e4 <_vfiprintf_r+0x1f8>
 800379c:	9b03      	ldr	r3, [sp, #12]
 800379e:	3307      	adds	r3, #7
 80037a0:	f023 0307 	bic.w	r3, r3, #7
 80037a4:	3308      	adds	r3, #8
 80037a6:	9303      	str	r3, [sp, #12]
 80037a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037aa:	443b      	add	r3, r7
 80037ac:	9309      	str	r3, [sp, #36]	; 0x24
 80037ae:	e767      	b.n	8003680 <_vfiprintf_r+0x94>
 80037b0:	460c      	mov	r4, r1
 80037b2:	2001      	movs	r0, #1
 80037b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80037b8:	e7a5      	b.n	8003706 <_vfiprintf_r+0x11a>
 80037ba:	2300      	movs	r3, #0
 80037bc:	f04f 0c0a 	mov.w	ip, #10
 80037c0:	4619      	mov	r1, r3
 80037c2:	3401      	adds	r4, #1
 80037c4:	9305      	str	r3, [sp, #20]
 80037c6:	4620      	mov	r0, r4
 80037c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037cc:	3a30      	subs	r2, #48	; 0x30
 80037ce:	2a09      	cmp	r2, #9
 80037d0:	d903      	bls.n	80037da <_vfiprintf_r+0x1ee>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0c5      	beq.n	8003762 <_vfiprintf_r+0x176>
 80037d6:	9105      	str	r1, [sp, #20]
 80037d8:	e7c3      	b.n	8003762 <_vfiprintf_r+0x176>
 80037da:	4604      	mov	r4, r0
 80037dc:	2301      	movs	r3, #1
 80037de:	fb0c 2101 	mla	r1, ip, r1, r2
 80037e2:	e7f0      	b.n	80037c6 <_vfiprintf_r+0x1da>
 80037e4:	ab03      	add	r3, sp, #12
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	462a      	mov	r2, r5
 80037ea:	4630      	mov	r0, r6
 80037ec:	4b15      	ldr	r3, [pc, #84]	; (8003844 <_vfiprintf_r+0x258>)
 80037ee:	a904      	add	r1, sp, #16
 80037f0:	f3af 8000 	nop.w
 80037f4:	4607      	mov	r7, r0
 80037f6:	1c78      	adds	r0, r7, #1
 80037f8:	d1d6      	bne.n	80037a8 <_vfiprintf_r+0x1bc>
 80037fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037fc:	07d9      	lsls	r1, r3, #31
 80037fe:	d405      	bmi.n	800380c <_vfiprintf_r+0x220>
 8003800:	89ab      	ldrh	r3, [r5, #12]
 8003802:	059a      	lsls	r2, r3, #22
 8003804:	d402      	bmi.n	800380c <_vfiprintf_r+0x220>
 8003806:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003808:	f7ff fdbd 	bl	8003386 <__retarget_lock_release_recursive>
 800380c:	89ab      	ldrh	r3, [r5, #12]
 800380e:	065b      	lsls	r3, r3, #25
 8003810:	f53f af12 	bmi.w	8003638 <_vfiprintf_r+0x4c>
 8003814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003816:	e711      	b.n	800363c <_vfiprintf_r+0x50>
 8003818:	ab03      	add	r3, sp, #12
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	462a      	mov	r2, r5
 800381e:	4630      	mov	r0, r6
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <_vfiprintf_r+0x258>)
 8003822:	a904      	add	r1, sp, #16
 8003824:	f000 f882 	bl	800392c <_printf_i>
 8003828:	e7e4      	b.n	80037f4 <_vfiprintf_r+0x208>
 800382a:	bf00      	nop
 800382c:	08003e74 	.word	0x08003e74
 8003830:	08003e94 	.word	0x08003e94
 8003834:	08003e54 	.word	0x08003e54
 8003838:	08003eb4 	.word	0x08003eb4
 800383c:	08003ebe 	.word	0x08003ebe
 8003840:	00000000 	.word	0x00000000
 8003844:	080035c7 	.word	0x080035c7
 8003848:	08003eba 	.word	0x08003eba

0800384c <_printf_common>:
 800384c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003850:	4616      	mov	r6, r2
 8003852:	4699      	mov	r9, r3
 8003854:	688a      	ldr	r2, [r1, #8]
 8003856:	690b      	ldr	r3, [r1, #16]
 8003858:	4607      	mov	r7, r0
 800385a:	4293      	cmp	r3, r2
 800385c:	bfb8      	it	lt
 800385e:	4613      	movlt	r3, r2
 8003860:	6033      	str	r3, [r6, #0]
 8003862:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003866:	460c      	mov	r4, r1
 8003868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800386c:	b10a      	cbz	r2, 8003872 <_printf_common+0x26>
 800386e:	3301      	adds	r3, #1
 8003870:	6033      	str	r3, [r6, #0]
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	0699      	lsls	r1, r3, #26
 8003876:	bf42      	ittt	mi
 8003878:	6833      	ldrmi	r3, [r6, #0]
 800387a:	3302      	addmi	r3, #2
 800387c:	6033      	strmi	r3, [r6, #0]
 800387e:	6825      	ldr	r5, [r4, #0]
 8003880:	f015 0506 	ands.w	r5, r5, #6
 8003884:	d106      	bne.n	8003894 <_printf_common+0x48>
 8003886:	f104 0a19 	add.w	sl, r4, #25
 800388a:	68e3      	ldr	r3, [r4, #12]
 800388c:	6832      	ldr	r2, [r6, #0]
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	42ab      	cmp	r3, r5
 8003892:	dc28      	bgt.n	80038e6 <_printf_common+0x9a>
 8003894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003898:	1e13      	subs	r3, r2, #0
 800389a:	6822      	ldr	r2, [r4, #0]
 800389c:	bf18      	it	ne
 800389e:	2301      	movne	r3, #1
 80038a0:	0692      	lsls	r2, r2, #26
 80038a2:	d42d      	bmi.n	8003900 <_printf_common+0xb4>
 80038a4:	4649      	mov	r1, r9
 80038a6:	4638      	mov	r0, r7
 80038a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038ac:	47c0      	blx	r8
 80038ae:	3001      	adds	r0, #1
 80038b0:	d020      	beq.n	80038f4 <_printf_common+0xa8>
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	68e5      	ldr	r5, [r4, #12]
 80038b6:	f003 0306 	and.w	r3, r3, #6
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	bf18      	it	ne
 80038be:	2500      	movne	r5, #0
 80038c0:	6832      	ldr	r2, [r6, #0]
 80038c2:	f04f 0600 	mov.w	r6, #0
 80038c6:	68a3      	ldr	r3, [r4, #8]
 80038c8:	bf08      	it	eq
 80038ca:	1aad      	subeq	r5, r5, r2
 80038cc:	6922      	ldr	r2, [r4, #16]
 80038ce:	bf08      	it	eq
 80038d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bfc4      	itt	gt
 80038d8:	1a9b      	subgt	r3, r3, r2
 80038da:	18ed      	addgt	r5, r5, r3
 80038dc:	341a      	adds	r4, #26
 80038de:	42b5      	cmp	r5, r6
 80038e0:	d11a      	bne.n	8003918 <_printf_common+0xcc>
 80038e2:	2000      	movs	r0, #0
 80038e4:	e008      	b.n	80038f8 <_printf_common+0xac>
 80038e6:	2301      	movs	r3, #1
 80038e8:	4652      	mov	r2, sl
 80038ea:	4649      	mov	r1, r9
 80038ec:	4638      	mov	r0, r7
 80038ee:	47c0      	blx	r8
 80038f0:	3001      	adds	r0, #1
 80038f2:	d103      	bne.n	80038fc <_printf_common+0xb0>
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038fc:	3501      	adds	r5, #1
 80038fe:	e7c4      	b.n	800388a <_printf_common+0x3e>
 8003900:	2030      	movs	r0, #48	; 0x30
 8003902:	18e1      	adds	r1, r4, r3
 8003904:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800390e:	4422      	add	r2, r4
 8003910:	3302      	adds	r3, #2
 8003912:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003916:	e7c5      	b.n	80038a4 <_printf_common+0x58>
 8003918:	2301      	movs	r3, #1
 800391a:	4622      	mov	r2, r4
 800391c:	4649      	mov	r1, r9
 800391e:	4638      	mov	r0, r7
 8003920:	47c0      	blx	r8
 8003922:	3001      	adds	r0, #1
 8003924:	d0e6      	beq.n	80038f4 <_printf_common+0xa8>
 8003926:	3601      	adds	r6, #1
 8003928:	e7d9      	b.n	80038de <_printf_common+0x92>
	...

0800392c <_printf_i>:
 800392c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003930:	460c      	mov	r4, r1
 8003932:	7e27      	ldrb	r7, [r4, #24]
 8003934:	4691      	mov	r9, r2
 8003936:	2f78      	cmp	r7, #120	; 0x78
 8003938:	4680      	mov	r8, r0
 800393a:	469a      	mov	sl, r3
 800393c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800393e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003942:	d807      	bhi.n	8003954 <_printf_i+0x28>
 8003944:	2f62      	cmp	r7, #98	; 0x62
 8003946:	d80a      	bhi.n	800395e <_printf_i+0x32>
 8003948:	2f00      	cmp	r7, #0
 800394a:	f000 80d9 	beq.w	8003b00 <_printf_i+0x1d4>
 800394e:	2f58      	cmp	r7, #88	; 0x58
 8003950:	f000 80a4 	beq.w	8003a9c <_printf_i+0x170>
 8003954:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800395c:	e03a      	b.n	80039d4 <_printf_i+0xa8>
 800395e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003962:	2b15      	cmp	r3, #21
 8003964:	d8f6      	bhi.n	8003954 <_printf_i+0x28>
 8003966:	a001      	add	r0, pc, #4	; (adr r0, 800396c <_printf_i+0x40>)
 8003968:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800396c:	080039c5 	.word	0x080039c5
 8003970:	080039d9 	.word	0x080039d9
 8003974:	08003955 	.word	0x08003955
 8003978:	08003955 	.word	0x08003955
 800397c:	08003955 	.word	0x08003955
 8003980:	08003955 	.word	0x08003955
 8003984:	080039d9 	.word	0x080039d9
 8003988:	08003955 	.word	0x08003955
 800398c:	08003955 	.word	0x08003955
 8003990:	08003955 	.word	0x08003955
 8003994:	08003955 	.word	0x08003955
 8003998:	08003ae7 	.word	0x08003ae7
 800399c:	08003a09 	.word	0x08003a09
 80039a0:	08003ac9 	.word	0x08003ac9
 80039a4:	08003955 	.word	0x08003955
 80039a8:	08003955 	.word	0x08003955
 80039ac:	08003b09 	.word	0x08003b09
 80039b0:	08003955 	.word	0x08003955
 80039b4:	08003a09 	.word	0x08003a09
 80039b8:	08003955 	.word	0x08003955
 80039bc:	08003955 	.word	0x08003955
 80039c0:	08003ad1 	.word	0x08003ad1
 80039c4:	680b      	ldr	r3, [r1, #0]
 80039c6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039ca:	1d1a      	adds	r2, r3, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	600a      	str	r2, [r1, #0]
 80039d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0a4      	b.n	8003b22 <_printf_i+0x1f6>
 80039d8:	6825      	ldr	r5, [r4, #0]
 80039da:	6808      	ldr	r0, [r1, #0]
 80039dc:	062e      	lsls	r6, r5, #24
 80039de:	f100 0304 	add.w	r3, r0, #4
 80039e2:	d50a      	bpl.n	80039fa <_printf_i+0xce>
 80039e4:	6805      	ldr	r5, [r0, #0]
 80039e6:	600b      	str	r3, [r1, #0]
 80039e8:	2d00      	cmp	r5, #0
 80039ea:	da03      	bge.n	80039f4 <_printf_i+0xc8>
 80039ec:	232d      	movs	r3, #45	; 0x2d
 80039ee:	426d      	negs	r5, r5
 80039f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f4:	230a      	movs	r3, #10
 80039f6:	485e      	ldr	r0, [pc, #376]	; (8003b70 <_printf_i+0x244>)
 80039f8:	e019      	b.n	8003a2e <_printf_i+0x102>
 80039fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80039fe:	6805      	ldr	r5, [r0, #0]
 8003a00:	600b      	str	r3, [r1, #0]
 8003a02:	bf18      	it	ne
 8003a04:	b22d      	sxthne	r5, r5
 8003a06:	e7ef      	b.n	80039e8 <_printf_i+0xbc>
 8003a08:	680b      	ldr	r3, [r1, #0]
 8003a0a:	6825      	ldr	r5, [r4, #0]
 8003a0c:	1d18      	adds	r0, r3, #4
 8003a0e:	6008      	str	r0, [r1, #0]
 8003a10:	0628      	lsls	r0, r5, #24
 8003a12:	d501      	bpl.n	8003a18 <_printf_i+0xec>
 8003a14:	681d      	ldr	r5, [r3, #0]
 8003a16:	e002      	b.n	8003a1e <_printf_i+0xf2>
 8003a18:	0669      	lsls	r1, r5, #25
 8003a1a:	d5fb      	bpl.n	8003a14 <_printf_i+0xe8>
 8003a1c:	881d      	ldrh	r5, [r3, #0]
 8003a1e:	2f6f      	cmp	r7, #111	; 0x6f
 8003a20:	bf0c      	ite	eq
 8003a22:	2308      	moveq	r3, #8
 8003a24:	230a      	movne	r3, #10
 8003a26:	4852      	ldr	r0, [pc, #328]	; (8003b70 <_printf_i+0x244>)
 8003a28:	2100      	movs	r1, #0
 8003a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a2e:	6866      	ldr	r6, [r4, #4]
 8003a30:	2e00      	cmp	r6, #0
 8003a32:	bfa8      	it	ge
 8003a34:	6821      	ldrge	r1, [r4, #0]
 8003a36:	60a6      	str	r6, [r4, #8]
 8003a38:	bfa4      	itt	ge
 8003a3a:	f021 0104 	bicge.w	r1, r1, #4
 8003a3e:	6021      	strge	r1, [r4, #0]
 8003a40:	b90d      	cbnz	r5, 8003a46 <_printf_i+0x11a>
 8003a42:	2e00      	cmp	r6, #0
 8003a44:	d04d      	beq.n	8003ae2 <_printf_i+0x1b6>
 8003a46:	4616      	mov	r6, r2
 8003a48:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a4c:	fb03 5711 	mls	r7, r3, r1, r5
 8003a50:	5dc7      	ldrb	r7, [r0, r7]
 8003a52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a56:	462f      	mov	r7, r5
 8003a58:	42bb      	cmp	r3, r7
 8003a5a:	460d      	mov	r5, r1
 8003a5c:	d9f4      	bls.n	8003a48 <_printf_i+0x11c>
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d10b      	bne.n	8003a7a <_printf_i+0x14e>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	07df      	lsls	r7, r3, #31
 8003a66:	d508      	bpl.n	8003a7a <_printf_i+0x14e>
 8003a68:	6923      	ldr	r3, [r4, #16]
 8003a6a:	6861      	ldr	r1, [r4, #4]
 8003a6c:	4299      	cmp	r1, r3
 8003a6e:	bfde      	ittt	le
 8003a70:	2330      	movle	r3, #48	; 0x30
 8003a72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003a7a:	1b92      	subs	r2, r2, r6
 8003a7c:	6122      	str	r2, [r4, #16]
 8003a7e:	464b      	mov	r3, r9
 8003a80:	4621      	mov	r1, r4
 8003a82:	4640      	mov	r0, r8
 8003a84:	f8cd a000 	str.w	sl, [sp]
 8003a88:	aa03      	add	r2, sp, #12
 8003a8a:	f7ff fedf 	bl	800384c <_printf_common>
 8003a8e:	3001      	adds	r0, #1
 8003a90:	d14c      	bne.n	8003b2c <_printf_i+0x200>
 8003a92:	f04f 30ff 	mov.w	r0, #4294967295
 8003a96:	b004      	add	sp, #16
 8003a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a9c:	4834      	ldr	r0, [pc, #208]	; (8003b70 <_printf_i+0x244>)
 8003a9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003aa2:	680e      	ldr	r6, [r1, #0]
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003aaa:	061f      	lsls	r7, r3, #24
 8003aac:	600e      	str	r6, [r1, #0]
 8003aae:	d514      	bpl.n	8003ada <_printf_i+0x1ae>
 8003ab0:	07d9      	lsls	r1, r3, #31
 8003ab2:	bf44      	itt	mi
 8003ab4:	f043 0320 	orrmi.w	r3, r3, #32
 8003ab8:	6023      	strmi	r3, [r4, #0]
 8003aba:	b91d      	cbnz	r5, 8003ac4 <_printf_i+0x198>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	f023 0320 	bic.w	r3, r3, #32
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	e7af      	b.n	8003a28 <_printf_i+0xfc>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	f043 0320 	orr.w	r3, r3, #32
 8003ace:	6023      	str	r3, [r4, #0]
 8003ad0:	2378      	movs	r3, #120	; 0x78
 8003ad2:	4828      	ldr	r0, [pc, #160]	; (8003b74 <_printf_i+0x248>)
 8003ad4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ad8:	e7e3      	b.n	8003aa2 <_printf_i+0x176>
 8003ada:	065e      	lsls	r6, r3, #25
 8003adc:	bf48      	it	mi
 8003ade:	b2ad      	uxthmi	r5, r5
 8003ae0:	e7e6      	b.n	8003ab0 <_printf_i+0x184>
 8003ae2:	4616      	mov	r6, r2
 8003ae4:	e7bb      	b.n	8003a5e <_printf_i+0x132>
 8003ae6:	680b      	ldr	r3, [r1, #0]
 8003ae8:	6826      	ldr	r6, [r4, #0]
 8003aea:	1d1d      	adds	r5, r3, #4
 8003aec:	6960      	ldr	r0, [r4, #20]
 8003aee:	600d      	str	r5, [r1, #0]
 8003af0:	0635      	lsls	r5, r6, #24
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	d501      	bpl.n	8003afa <_printf_i+0x1ce>
 8003af6:	6018      	str	r0, [r3, #0]
 8003af8:	e002      	b.n	8003b00 <_printf_i+0x1d4>
 8003afa:	0671      	lsls	r1, r6, #25
 8003afc:	d5fb      	bpl.n	8003af6 <_printf_i+0x1ca>
 8003afe:	8018      	strh	r0, [r3, #0]
 8003b00:	2300      	movs	r3, #0
 8003b02:	4616      	mov	r6, r2
 8003b04:	6123      	str	r3, [r4, #16]
 8003b06:	e7ba      	b.n	8003a7e <_printf_i+0x152>
 8003b08:	680b      	ldr	r3, [r1, #0]
 8003b0a:	1d1a      	adds	r2, r3, #4
 8003b0c:	600a      	str	r2, [r1, #0]
 8003b0e:	681e      	ldr	r6, [r3, #0]
 8003b10:	2100      	movs	r1, #0
 8003b12:	4630      	mov	r0, r6
 8003b14:	6862      	ldr	r2, [r4, #4]
 8003b16:	f000 f8d9 	bl	8003ccc <memchr>
 8003b1a:	b108      	cbz	r0, 8003b20 <_printf_i+0x1f4>
 8003b1c:	1b80      	subs	r0, r0, r6
 8003b1e:	6060      	str	r0, [r4, #4]
 8003b20:	6863      	ldr	r3, [r4, #4]
 8003b22:	6123      	str	r3, [r4, #16]
 8003b24:	2300      	movs	r3, #0
 8003b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b2a:	e7a8      	b.n	8003a7e <_printf_i+0x152>
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	4649      	mov	r1, r9
 8003b30:	4640      	mov	r0, r8
 8003b32:	6923      	ldr	r3, [r4, #16]
 8003b34:	47d0      	blx	sl
 8003b36:	3001      	adds	r0, #1
 8003b38:	d0ab      	beq.n	8003a92 <_printf_i+0x166>
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	079b      	lsls	r3, r3, #30
 8003b3e:	d413      	bmi.n	8003b68 <_printf_i+0x23c>
 8003b40:	68e0      	ldr	r0, [r4, #12]
 8003b42:	9b03      	ldr	r3, [sp, #12]
 8003b44:	4298      	cmp	r0, r3
 8003b46:	bfb8      	it	lt
 8003b48:	4618      	movlt	r0, r3
 8003b4a:	e7a4      	b.n	8003a96 <_printf_i+0x16a>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4632      	mov	r2, r6
 8003b50:	4649      	mov	r1, r9
 8003b52:	4640      	mov	r0, r8
 8003b54:	47d0      	blx	sl
 8003b56:	3001      	adds	r0, #1
 8003b58:	d09b      	beq.n	8003a92 <_printf_i+0x166>
 8003b5a:	3501      	adds	r5, #1
 8003b5c:	68e3      	ldr	r3, [r4, #12]
 8003b5e:	9903      	ldr	r1, [sp, #12]
 8003b60:	1a5b      	subs	r3, r3, r1
 8003b62:	42ab      	cmp	r3, r5
 8003b64:	dcf2      	bgt.n	8003b4c <_printf_i+0x220>
 8003b66:	e7eb      	b.n	8003b40 <_printf_i+0x214>
 8003b68:	2500      	movs	r5, #0
 8003b6a:	f104 0619 	add.w	r6, r4, #25
 8003b6e:	e7f5      	b.n	8003b5c <_printf_i+0x230>
 8003b70:	08003ec5 	.word	0x08003ec5
 8003b74:	08003ed6 	.word	0x08003ed6

08003b78 <_sbrk_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	4d05      	ldr	r5, [pc, #20]	; (8003b94 <_sbrk_r+0x1c>)
 8003b7e:	4604      	mov	r4, r0
 8003b80:	4608      	mov	r0, r1
 8003b82:	602b      	str	r3, [r5, #0]
 8003b84:	f7fc ffa0 	bl	8000ac8 <_sbrk>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d102      	bne.n	8003b92 <_sbrk_r+0x1a>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	b103      	cbz	r3, 8003b92 <_sbrk_r+0x1a>
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	bd38      	pop	{r3, r4, r5, pc}
 8003b94:	200001f4 	.word	0x200001f4

08003b98 <__sread>:
 8003b98:	b510      	push	{r4, lr}
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba0:	f000 f8ae 	bl	8003d00 <_read_r>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	bfab      	itete	ge
 8003ba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003baa:	89a3      	ldrhlt	r3, [r4, #12]
 8003bac:	181b      	addge	r3, r3, r0
 8003bae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bb2:	bfac      	ite	ge
 8003bb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bb6:	81a3      	strhlt	r3, [r4, #12]
 8003bb8:	bd10      	pop	{r4, pc}

08003bba <__swrite>:
 8003bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bbe:	461f      	mov	r7, r3
 8003bc0:	898b      	ldrh	r3, [r1, #12]
 8003bc2:	4605      	mov	r5, r0
 8003bc4:	05db      	lsls	r3, r3, #23
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	4616      	mov	r6, r2
 8003bca:	d505      	bpl.n	8003bd8 <__swrite+0x1e>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd4:	f000 f868 	bl	8003ca8 <_lseek_r>
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	4632      	mov	r2, r6
 8003bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003be0:	81a3      	strh	r3, [r4, #12]
 8003be2:	4628      	mov	r0, r5
 8003be4:	463b      	mov	r3, r7
 8003be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bee:	f000 b817 	b.w	8003c20 <_write_r>

08003bf2 <__sseek>:
 8003bf2:	b510      	push	{r4, lr}
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bfa:	f000 f855 	bl	8003ca8 <_lseek_r>
 8003bfe:	1c43      	adds	r3, r0, #1
 8003c00:	89a3      	ldrh	r3, [r4, #12]
 8003c02:	bf15      	itete	ne
 8003c04:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c0e:	81a3      	strheq	r3, [r4, #12]
 8003c10:	bf18      	it	ne
 8003c12:	81a3      	strhne	r3, [r4, #12]
 8003c14:	bd10      	pop	{r4, pc}

08003c16 <__sclose>:
 8003c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c1a:	f000 b813 	b.w	8003c44 <_close_r>
	...

08003c20 <_write_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4604      	mov	r4, r0
 8003c24:	4608      	mov	r0, r1
 8003c26:	4611      	mov	r1, r2
 8003c28:	2200      	movs	r2, #0
 8003c2a:	4d05      	ldr	r5, [pc, #20]	; (8003c40 <_write_r+0x20>)
 8003c2c:	602a      	str	r2, [r5, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f7fc fefd 	bl	8000a2e <_write>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_write_r+0x1e>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_write_r+0x1e>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	200001f4 	.word	0x200001f4

08003c44 <_close_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	2300      	movs	r3, #0
 8003c48:	4d05      	ldr	r5, [pc, #20]	; (8003c60 <_close_r+0x1c>)
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	f7fc ff09 	bl	8000a66 <_close>
 8003c54:	1c43      	adds	r3, r0, #1
 8003c56:	d102      	bne.n	8003c5e <_close_r+0x1a>
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	b103      	cbz	r3, 8003c5e <_close_r+0x1a>
 8003c5c:	6023      	str	r3, [r4, #0]
 8003c5e:	bd38      	pop	{r3, r4, r5, pc}
 8003c60:	200001f4 	.word	0x200001f4

08003c64 <_fstat_r>:
 8003c64:	b538      	push	{r3, r4, r5, lr}
 8003c66:	2300      	movs	r3, #0
 8003c68:	4d06      	ldr	r5, [pc, #24]	; (8003c84 <_fstat_r+0x20>)
 8003c6a:	4604      	mov	r4, r0
 8003c6c:	4608      	mov	r0, r1
 8003c6e:	4611      	mov	r1, r2
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	f7fc ff03 	bl	8000a7c <_fstat>
 8003c76:	1c43      	adds	r3, r0, #1
 8003c78:	d102      	bne.n	8003c80 <_fstat_r+0x1c>
 8003c7a:	682b      	ldr	r3, [r5, #0]
 8003c7c:	b103      	cbz	r3, 8003c80 <_fstat_r+0x1c>
 8003c7e:	6023      	str	r3, [r4, #0]
 8003c80:	bd38      	pop	{r3, r4, r5, pc}
 8003c82:	bf00      	nop
 8003c84:	200001f4 	.word	0x200001f4

08003c88 <_isatty_r>:
 8003c88:	b538      	push	{r3, r4, r5, lr}
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	4d05      	ldr	r5, [pc, #20]	; (8003ca4 <_isatty_r+0x1c>)
 8003c8e:	4604      	mov	r4, r0
 8003c90:	4608      	mov	r0, r1
 8003c92:	602b      	str	r3, [r5, #0]
 8003c94:	f7fc ff01 	bl	8000a9a <_isatty>
 8003c98:	1c43      	adds	r3, r0, #1
 8003c9a:	d102      	bne.n	8003ca2 <_isatty_r+0x1a>
 8003c9c:	682b      	ldr	r3, [r5, #0]
 8003c9e:	b103      	cbz	r3, 8003ca2 <_isatty_r+0x1a>
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	200001f4 	.word	0x200001f4

08003ca8 <_lseek_r>:
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	4604      	mov	r4, r0
 8003cac:	4608      	mov	r0, r1
 8003cae:	4611      	mov	r1, r2
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	4d05      	ldr	r5, [pc, #20]	; (8003cc8 <_lseek_r+0x20>)
 8003cb4:	602a      	str	r2, [r5, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	f7fc fef9 	bl	8000aae <_lseek>
 8003cbc:	1c43      	adds	r3, r0, #1
 8003cbe:	d102      	bne.n	8003cc6 <_lseek_r+0x1e>
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	b103      	cbz	r3, 8003cc6 <_lseek_r+0x1e>
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	bd38      	pop	{r3, r4, r5, pc}
 8003cc8:	200001f4 	.word	0x200001f4

08003ccc <memchr>:
 8003ccc:	4603      	mov	r3, r0
 8003cce:	b510      	push	{r4, lr}
 8003cd0:	b2c9      	uxtb	r1, r1
 8003cd2:	4402      	add	r2, r0
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	d101      	bne.n	8003cde <memchr+0x12>
 8003cda:	2000      	movs	r0, #0
 8003cdc:	e003      	b.n	8003ce6 <memchr+0x1a>
 8003cde:	7804      	ldrb	r4, [r0, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	428c      	cmp	r4, r1
 8003ce4:	d1f6      	bne.n	8003cd4 <memchr+0x8>
 8003ce6:	bd10      	pop	{r4, pc}

08003ce8 <__malloc_lock>:
 8003ce8:	4801      	ldr	r0, [pc, #4]	; (8003cf0 <__malloc_lock+0x8>)
 8003cea:	f7ff bb4b 	b.w	8003384 <__retarget_lock_acquire_recursive>
 8003cee:	bf00      	nop
 8003cf0:	200001ec 	.word	0x200001ec

08003cf4 <__malloc_unlock>:
 8003cf4:	4801      	ldr	r0, [pc, #4]	; (8003cfc <__malloc_unlock+0x8>)
 8003cf6:	f7ff bb46 	b.w	8003386 <__retarget_lock_release_recursive>
 8003cfa:	bf00      	nop
 8003cfc:	200001ec 	.word	0x200001ec

08003d00 <_read_r>:
 8003d00:	b538      	push	{r3, r4, r5, lr}
 8003d02:	4604      	mov	r4, r0
 8003d04:	4608      	mov	r0, r1
 8003d06:	4611      	mov	r1, r2
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4d05      	ldr	r5, [pc, #20]	; (8003d20 <_read_r+0x20>)
 8003d0c:	602a      	str	r2, [r5, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f7fc fe70 	bl	80009f4 <_read>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d102      	bne.n	8003d1e <_read_r+0x1e>
 8003d18:	682b      	ldr	r3, [r5, #0]
 8003d1a:	b103      	cbz	r3, 8003d1e <_read_r+0x1e>
 8003d1c:	6023      	str	r3, [r4, #0]
 8003d1e:	bd38      	pop	{r3, r4, r5, pc}
 8003d20:	200001f4 	.word	0x200001f4

08003d24 <_init>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	bf00      	nop
 8003d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2a:	bc08      	pop	{r3}
 8003d2c:	469e      	mov	lr, r3
 8003d2e:	4770      	bx	lr

08003d30 <_fini>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	bf00      	nop
 8003d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d36:	bc08      	pop	{r3}
 8003d38:	469e      	mov	lr, r3
 8003d3a:	4770      	bx	lr
